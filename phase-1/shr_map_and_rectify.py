
# -------------------------------------- libraries --------------------------------------------
# !/usr/local/bin/python
# coding: utf-8
from os import walk
import random
import pickle
import copy as cpy
import operator
# import csv
import networkx as nx
# import numpy as np
# from scipy.sparse import *
# from scipy import *
# import matplotlib.pyplot as plt
import sys,codecs,re
sys.path.append('../')
reload(sys);
sys.setdefaultencoding("utf8")
import sys,codecs,re
sys.path.append('../')
import pandas as pd
import numpy as np

# This Python file uses the following encoding: utf-8

# --------------------------------------- paths -----------------------------------------------

save_path="stats/"
sent_path="test/1/"
new_sent_path="other/"
under_path='under_sent/'

# -------------------------------- class definitions ------------------------------------------
class gold_sent(object):
	"""docstring for gold_sent"""
	def __init__(self, sent_id,string_form, content_list):
		super(gold_sent, self).__init__()
		self.sent_id = sent_id
		self.string_form = string_form
		self.content_list = content_list  
		# list of gold words
		pass
	def print_gold(self):
		print "Sentence ID : " + str(self.sent_id)
		print "String : " + str(self.string_form)
		for cur_word in self.content_list:
			cur_word.print_gold()
			pass
		pass
	pass

class gold_word(object):
	"""docstring for gold_word"""
	def __init__(self, name, POS, dep_tag, from_tag, to_tag):
		super(gold_word, self).__init__()
		self.name = name
		self.POS = POS
		self.dep_tag = dep_tag
		self.from_tag = from_tag
		self.to_tag = to_tag
		pass
	def print_gold(self):
		# global possible_dep_tag
		# if (self.dep_tag in possible_dep_tag) or (self.dep_tag==None):
		# 	return
		# 	pass
		print "Word : " + str(self.name)
		print "POS : " + str(self.POS)
		print "dep_tag : "+str(self.dep_tag)
		print "from_tag : " + str(self.from_tag)
		print "to_tag : " + str(self.to_tag)
		pass
	pass

class sentences:
	def __init__(self,sent_id,sentence):
		self.sent_id=sent_id
		self.sentence=sentence
		self.chunk=[]
		pass
	def print_sents(self):
		print "sent_id :" + str(self.sent_id)
		print "sentence :" + str(self.sentence)
		print "Chunks : "
		print "N_of chunks :" + str(len(self.chunk))
		for cur_chunk in self.chunk:
			cur_chunk.print_chunk()
			pass
		pass
	pass

class words:
	def __init__(self,main_word,word_length,offset,starting_posn,max_line):
		self.main_word=main_word
		self.word_length=word_length
		self.offset=offset
		self.starting_posn=starting_posn
		self.max_line=max_line
		pass
	def print_word(self):
		print "main word :" + str(self.main_word)
		print "word length :" + str(self.word_length)
		print "offset :" + str(self.offset)
		print "starting_posn :" + str(self.starting_posn)
		print "max_line :" + str(self.max_line)
		pass

class segments:
	def __init__(self,uper_word,colspan,line_num,own_word,offset,prob,own_seg,lemma,links):
		self.uper_word=uper_word
		self.colspan=colspan
		self.line_num=line_num
		self.own_word=own_word
		self.offset=offset 
		self.prob=prob
		self.own_seg=own_seg
		self.lemma=lemma
		self.links=links
		pass

class word_new:
	def __init__(self,names,lemmas,urls,forms):
		self.names=names
		self.lemmas=lemmas
		self.urls=urls
		self.forms=forms
		pass
	def print_word_new(self):
		print "word starts >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
		print "names :" + str(self.names)
		print "lemmas :" + str(self.lemmas)
		print "urls :" + str(self.urls)
		print "forms :" + str(self.forms)
		print "word complete >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
		pass

class chunks:
	def __init__(self,chunk_name):
		self.chunk_name=chunk_name
		self.chunk_words={}
		pass
	def print_chunk(self):
		print "chunk_name :" + str(self.chunk_name.encode('utf-8'))
		# print utf_to_ascii(self.chunk_name)
		# print "chunk keys :" + str(self.chunk_words.keys())
		sorted_keys=self.chunk_words.keys()
		sorted_keys.sort()
		print sorted_keys
		print "chunk starts $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$"
		for cur_key in sorted_keys :
			print "word_list starts @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
			print "key is " + str(cur_key)
			for cur_word in self.chunk_words[cur_key] :
				# print cur_word.__class__.__name__
				print str(cur_word.print_word_new())
			print "word_list ends @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
		print "chunk ends $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$"
		pass

class word_definite:
	def __init__(self,derived, lemma, cng, pos, chunk_id):
		self.lemma = lemma
		self.derived = derived
		self.cng = str(cng)
		self.tup = "{}_{}".format(self.lemma, self.cng)
		self.pos = pos
		self.chunk_id = chunk_id        
		# Fields Required for heap
		self.dist = np.inf
		self.src = -1
		self.id = -1
		self.isConflicted = False
	def __str__(self):
		return 'WD_Node[C: %d, P: %d, %s @(%s) => %s]' %(self.chunk_id, self.pos, self.lemma, self.cng, self.derived)
	def __repr__(self):
		return str(self)
# -------------------------------- global variables -------------------------------------------
# sandhi_dict=pickle.load(open( "sandhi_dict.p" , 'rb'))
# word_null_dict=pickle.load(open( "word_null_dict.p" , 'rb'))
# gold_sentence_list=pickle.load( open( "support/gold_sentence_list.p", "rb" ) )
# dcs_lemmas_count_dict=pickle.load( open( "support/dcs_lemmas_count_dict.p", "rb" ) )
# dcs_words_count_dict=pickle.load( open( "support/dcs_words_count_dict.p", "rb" ) )

# -------------------------------- load required pickles --------------------------------------

# -------------------------------- previous functions -----------------------------------------


def is_verb(cur_form):
	sec_v_list = [ "ou" , "pp." , "ppa." , "pfp." , "inf." , "abs."]
	main_v_list = ["pr. ps." , "imp. ps." , "impft. ps." , "aor. ps." , "opt. ps." , "fut. ac." , "fut. ps." , "cond. ac." , "cond.ps." , "per. fut. ac." , "per. fut. ps." , "aor. [1] ac." , "aor. [1] ps." , "aor. [2] ac." , "aor. [2] ps." , "aor. [3] ac." , "aor. [3] ps." , "aor. [4] ac." , "aor. [4] ps." , "aor. [5] ac." , "aor. [5] ps." , "aor. [7] ac." , "aor. [7] ps." , "pft. ac." , "per. pft."]+["pr." , "opt." , "imp." , "impft."]
	dummy_v_list=['ppr','pfu','int','des','inj','opt','pft','ppr','pr','impft','imp','fut','cond','per','aor','ben','ca' ,'pp','pfp','inf','abs']
	# n_sec
	for cur_sec in sec_v_list+dummy_v_list:
		if cur_sec in str(cur_form) :
			return True
			pass
		pass
	# n_main
	for cur_main in main_v_list:
		if cur_main in str(cur_form):
			return True
			pass
	return False
	pass

def splitTillPeriod(config,listInput): #see that config is not empty and is of type string
	#returns config sans first part and firstpart is appended to listInput
	
	configList=list(config)
	out=''
	periodIndex=0
	val=''
	for i,val in enumerate(configList):
	   a=2
	   periodIndex=i
	   if val=='.':
		break
	   if val!=" ": 
		   out=out+val; 
	if val!=".":
		config1=" ".join(config.split())
		listInput.append(config1)
		return ""
	else:	
		config1="".join(configList[(periodIndex+1):])
		listInput.append(out)
		return config1
		pass
	pass

def wordTypeCheck(config):
	#if it is noun Im assuming it has 3 parts
	#form is noun or verb or...
	form=None
	# print(form, config)
	
	nounMapping={28:	'xt?',  29:	'Nom. sg. masc.',  30:	'Nom. sg. fem.',  31:	'Nom. sg. neutr.',  32:	'Nom. sg. adj.',  33:	'xt?',  34:	'Nom. du. masc.',  35:	'Nom. du. fem.',  36:	'Nom. du. neutr.',  37:	'Nom. du. adj.',  38:	'xt?',  39:	'Nom. pl. masc.',  40:	'Nom. pl. fem.',  41:	'Nom. pl. neutr.',  42:	'Nom. pl. adj.',  48:	'xt?',  49:	'Voc. sg. masc.',  50:	'Voc. sg. fem.',  51:	'Voc. sg. neutr.',  54:	'Voc. du. masc.',  55:	'Voc. du. fem.',  56:	'Voc. du. neutr.',  58:	'xt?',  59:	'Voc. pl. masc.',  60:	'Voc. pl. fem.',  61:	'Voc. pl. neutr.',  68:	'xt?',  69:	'Acc. sg. masc.',  70:	'Acc. sg. fem.',  71:	'Acc. sg. neutr.',  72:	'Acc. sg. adj.',  73:	'xt?',  74:	'Acc. du. masc.',  75:	'Acc. du. fem.',  76:	'Acc. du. neutr.',  77:	'Acc. du. adj.',  78:	'xt?',  79:	'Acc. pl. masc.',  80:	'Acc. pl. fem.',  81:	'Acc. pl. neutr.',  82:	'Acc. pl. adj.',  88:	'xt?',  89:	'Instr. sg. masc.',  90:	'Instr. sg. fem.',  91:	'Instr. sg. neutr.',  92:	'Instr. sg. adj.',  93:	'xt?',  94:	'Instr. du. masc.',  95:	'Instr. du. fem.',  96:	'Instr. du. neutr.',  97:	'Instr. du. adj.',  98:	'xt?',  99:	'Instr. pl. masc.',  100:	'Instr. pl. fem.',  101:	'Instr. pl. neutr.',  102:	'Instr. pl. adj.',  108:	'xt?',  109:	'Dat. sg. masc.',  110:	'Dat. sg. fem.',  111:	'Dat. sg. neutr.',  112:	'Dat. sg. adj.',  114:	'Dat. du. masc.',  115:	'Dat. du. fem.',  116:	'Dat. du. neutr.',  117:	'Dat. du. adj.',  118:	'xt?',  119:	'Dat. pl. masc.',  120:	'Dat. pl. fem.',  121:	'Dat. pl. neutr.',  122:	'Dat. pl. adj.',  128:	'xt?',  129:	'Abl. sg. masc.',  130:	'Abl. sg. fem.',  131:	'Abl. sg. neutr.',  132:	'Abl. sg. adj.',  134:	'Abl. du. masc.',  135:	'Abl. du. fem.',  136:	'Abl. du. neutr.',  137:	'Abl. du. adj.',  138:	'xt?',  139:	'Abl. pl. masc.',  140:	'Abl. pl. fem.',  141:	'Abl. pl. neutr.',  142:	'Abl. pl. adj.',  148:	'xt?',  149:	'Gen. sg. masc.',  150:	'Gen. sg. fem.',  151:	'Gen. sg. neutr.',  152:	'Gen. sg. adj.',  153:	'xt?',  154:	'Gen. du. masc.',  155:	'Gen. du. fem.',  156:	'Gen. du. neutr.',  157:	'Gen. du. adj.',  158:	'xt?',  159:	'Gen. pl. masc.',  160:	'Gen. pl. fem.',  161:	'Gen. pl. neutr.',  162:	'Gen. pl. adj.',  168:	'xt?',  169:	'Loc. sg. masc.',  170:	'Loc. sg. fem.',  171:	'Loc. sg. neutr.',  172:	'Loc. sg. adj.',  173:	'xt?',  174:	'Loc. du. masc.',  175:	'Loc. du. fem.',  176:	'Loc. du. neutr.',  177:	'Loc. du. adj.',  178:	'xt?',  179:	'Loc. pl. masc.',  180:	'Loc. pl. fem.',  181:	'Loc. pl. neutr.',  182:	'Loc. pl. adj.',  }
	verbMapping1={1: 'pr. [*] ac.', 2: 'opt. [*] ac.', 3: 'imp. [*] ac', 4: 'impft. [*] ac.', 5: 'fut. ac/ps.', 6: 'cond. ac/ps.', 7: 'per. fut. ac/ps.', 8: 'aor. [1] ac/ps.', 9: 'aor. [2] ac/ps.', 10: 'aor. [3] ac/ps.', 11: 'aor. [4] ac/ps.', 12: 'aor. [5] ac/ps.', 13: 'aor. [7] ac/ps.', 14: 'ben. ac/ps.', 15: 'pft. ac.', 16: 'per. pft.', 19: 'pp.', 20: 'ppa.', 21: 'pfp.', 22: 'inf.', 23: 'abs.', 24: 'pr. ps.', 26: 'imp. ps.', 27: 'impft. ps.', 28: 'aor. ps.', 29: 'opt. ps.', 30: 'ou', }
	verbMapping2={1: 'sg. 1', 2: 'sg. 2', 3: 'sg. 3', 4: 'du. 1', 5: 'du. 2', 6: 'du. 3', 7: 'pl. 1', 8: 'pl. 2', 9: 'pl. 3', }

	indeclinable_list=['part.' , 'conj.' , 'abs.' , 'prep.' , 'ind.' , 'ca. abs.' ]
	if form == None :
		for cur_ind in indeclinable_list:
			if cur_ind in config:
				form='indeclinable'
				pass
			pass
		pass
	if form == None:
		if ('iic.' in config) or ('iiv.' in config):
			form = 'compound'
		pass
	if form == None:
		if ('adv' in str(config)) or ('adv.' in config) or ('und.' in config) or ('tasil' in config) :
			form ="undetermined"
			pass
		pass
	if form == None:
		if is_verb(config):
			form='verb'
			pass
		pass
	noun_start=['g' , 'i', 'nom' , 'voc' , 'acc' , 'inst' , 'dat' , 'abl' , 'gen' , 'loc']
	if config.split(".")[0].strip() in noun_start :
		form ='noun'
		pass
	if form=='indeclinable':
		if config=='part.':
			return 2
		elif config=='conj.':
			return 2
		elif config=='abs.':
			return -230
		elif config=='prep.':
			return 2
		elif config=='ind.':
			return 2
		elif config=='ca. abs.':
			return -230
		else:
			return 'config is invalid'
		
	elif form=='compound':
		if config=='iic.':
			return 3
		elif config=='iiv.':
			return 3
		else:
			return 'config is invalid'
		
	elif form=='undetermined':
		if config=='adv.':
			return 2
		elif config=='und.':
			return 1
		elif config=='tasil':
			return 1
		else:
			return 'config is invalid'
	
	elif form=='noun':
		# print("entered noun")
		config1=config
		x=[]
		config1=splitTillPeriod(config1,x)
		one=x[0]
		x=[]
		config1=splitTillPeriod(config1,x)
		two=x[0]
		x=[]
		config1=splitTillPeriod(config1,x)
		three=x[0]
		
		isAdj=0
		if three=='*':
			three='n'
			isAdj=1
			
		for i in nounMapping.keys():
			if one!='i'and one!='g':
				if one[len(one)-2:] in nounMapping[i]:
					if two in nounMapping[i]:
					
						if three in nounMapping[i]:
							if(isAdj==0):
							  return i  
							else:
								return i+1
									  
			   
			elif one=='i':
				 if 'Instr' in nounMapping[i]:
					if two in nounMapping[i]:
									   
					  if three=='n':
						if 'neutr' in nounMapping[i]:
							 if(isAdj==0):
							  return i  
							 else:
								return i+1
					
					  elif three in nounMapping[i]:
						   return i 
			elif one=='g':
				if 'Gen' in nounMapping[i]:
				   if two in nounMapping[i]:
									   
					  if three=='n':
						if 'neutr' in nounMapping[i]:
							 if(isAdj==0):
							  return i  
							 else:
								return i+1
					
					  elif three in nounMapping[i]:
								return i 
		
	elif form=='verb':
		unit=0
		ten=0
		#to remove ca des int
		x=[]
		configActual=config
		config=splitTillPeriod(config,x)
		if(x[0]=='ca' or x[0]=='des' or x[0]=='int'):
			y=2 #do nothing
		else:
			config=configActual
		#if [vn.] is present
		if 'vn.' in config:
			config=config.replace('vn.','')	   
		
		x=[]
		config=splitTillPeriod(config,x)
		
		one=x[0]
		two=''
		three=''
		ONE=''
		TWO=''
		
		if config!='':
			x=[]
			config=splitTillPeriod(config,x)
			temp=x[0]
			if temp!='sg'and temp!='pl' and temp!='du':
				two=temp
			else:
				ONE=temp
		 
		if config!='':
			x=[]
			config=splitTillPeriod(config,x)
			temp=x[0]
			print
			if temp!='sg'and temp!='pl' and temp!='du':
				if ONE=='':
					three=temp
			elif ONE!='':
				TWO=temp
			else:
				ONE=temp
		if config!='':
			x=[]
			config=splitTillPeriod(config,x)
			temp=x[0]
			if temp=='sg'or temp=='pl' or temp=='du':
				ONE=temp
			elif temp=='1'or temp=='2' or temp=='3':
				TWO=temp
		
		if config!='':
			x=[]
			config=splitTillPeriod(config,x)
			temp=x[0]	   
			if temp=='1'or temp=='2' or temp=='3':
				TWO=temp  
		
		for i in verbMapping2.keys():
			if ONE!='':
				if ONE in verbMapping2[i] and TWO in verbMapping2[i]:
				   unit=i
				   break
				
		if one=='pp':
			ten=19
		if one=='ppa':
			ten=20
		if one=='pfp':
			ten=21 
		if one=='inf':
			ten=22
		if one=='abs':
			ten=23
		if one=='inj':
			ten=30
			
		if one=='pr' or one=='ppr':
			if two=='ps':
				ten=24
			else :
				ten=24
		if one=='imp':
			if two=='ps':
				ten=26
		if one=='impft':
			if two=='ps':
				ten=27
		if one=='aor':
			if two=='ps':
				ten=28
		if one=='opt':
			if two=='ps':
				ten=29  
				
		if one=='pr'or one=='ppr':
			if 'ac' in two or 'md' in two:
				ten=1
		if one=='opt':
			if 'ac' in two or 'md' in two:
				ten=2		
		if one=='imp':
			if 'ac' in two or 'md' in two:
				ten=3
		if one=='impft':
			if 'ac' in two or 'md' in two:
				ten=4
		if one=='pft' or one=='ppf':
			if 'ac' in two or 'md' in two:
				ten=15
			else :
				ten=15
			 
		if one=='per':
			if two=='pft':
				ten=16
				
		
		if one=='fut' or one=='pfu':
			if 'ac' in two or 'ps' in two or 'md' in two:
				ten=5
		if one=='cond':
			if 'ac' in two or 'ps' in two or 'md' in two:
				ten=6
		if one=='ben':
			if 'ac' in two or 'ps' in two or 'md' in two:
				ten=14		
		
		if one=='aor':
			if 'ac' in two or 'ps' in two or 'md' in two:
				if '1' in two:
					ten=8
				if '2' in two:
					ten=9
				if '3' in two:
					ten=10 
				if '4' in two:
					ten=11
				if '5' in two or '6' in two:
					ten=12
				if '7' in two:
					ten=13	
		
		if one=='per':
			if two=='fut':
				if (('ac' in three) or ('ps' in three) or 'md' in three):
					ten=7
					
		if ten!=0:
			output=-1*(ten*10+unit)
			return output
		else:
			x=3
		
	else:
		return None
		pass
	pass

def is_int(s):
    try: 
        int(s)
        return True
    except :
        return False

def utf_to_ascii(a):
    # coding: utf-8 
    double_dict={}
    f=open('support/roman/rom2.txt','r')
    for lines in f.readlines():
            words=lines.split(',')
            words[1]=words[1].replace('\n','')
            double_dict[words[0]]=words[1]
    f.close()
    single_dict={}
    q=open('support/roman/rom.txt','r')
    for lines in q.readlines():
            words=lines.split(',')
            words[1]=words[1].replace('\n','')
            single_dict[words[0]]=words[1]
    q.close()
    
    for elem in double_dict:
        if elem in a:
            a=a.replace(elem,double_dict[elem])
    for elem in single_dict:
        if elem in a:
            a=a.replace(elem,single_dict[elem])
    return(a)
    pass

def is_lemma_in_slp(cur_lemma):
	for cur_char in cur_lemma:
		if not cur_char.isalpha():
			return False
			pass
		pass
	return True
	pass

def get_done_file_list(sent_path):
	f = []
	done_list=[]
	for (useless1, useless2, filenames) in walk(sent_path):
		f.extend(filenames)
		break
	for cur_file in f:
		cur_file_index=int(cur_file.split('.')[0])
		done_list.append(cur_file_index)
		pass
	done_list.sort()
	# print done_list
	# exit(0)
	return done_list
	pass

def get_gold_sent(cur_sent_id):
	global gold_sentence_list
	for cur_sent in gold_sentence_list:
		if cur_sent.sent_id == cur_sent_id:
			return cur_sent
			pass
		pass
	pass

# sandhi_dict=pickle.load(open( "support/sandhi_dict.p" , 'rb'))

def get_input_sentences():
	# cur_file_list=[14, 29, 52, 84, 90, 300, 304, 393, 446, 451, 484, 518, 577, 606, 607, 610, 659, 698, 700, 774, 1017, 1052, 1055, 1201, 1365, 1375, 1407, 1470, 1495, 1679, 1702, 1721, 1853, 1957, 1961, 1965, 1970, 1992, 2063, 2214, 2249, 2350, 2363, 2398, 2498, 2507, 2514, 2625, 2746, 2861, 2955, 2962, 3107, 3134, 3185, 3189, 3215, 3239, 3435, 3443, 3459, 3470, 3594, 3692, 3742]
	# cur_file_list=[1, 9, 11, 13, 15, 16, 18, 34, 43, 47, 48, 53, 58, 67, 71, 74, 76, 108, 116, 122, 142, 143, 145, 147, 148, 149, 150, 152, 155, 165, 167, 168, 171, 174, 186, 188, 198, 200, 205, 208, 214, 215, 223, 235, 239, 260, 262, 264, 270, 282, 291, 292, 296, 297, 298, 299, 306, 307, 321, 326, 328, 332, 334, 352, 366, 394, 397, 429, 434, 437, 441, 458, 508, 522, 523, 526, 530, 541, 560, 564, 572, 580, 581, 582, 591, 595, 596, 598, 602, 605, 616, 619, 620, 623, 628, 632, 634, 636, 642, 646, 649, 652, 653, 657, 660, 662, 663, 666, 667, 669, 670, 671, 672, 673, 677, 683, 685, 693, 699, 702, 703, 709, 710, 711, 715, 724, 725, 726, 727, 728, 730, 732, 733, 735, 736, 739, 741, 744, 754, 755, 757, 760, 762, 775, 776, 781, 782, 783, 788, 789, 790, 794, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 824, 831, 837, 838, 844, 845, 847, 848, 852, 854, 857, 859, 861, 864, 865, 878, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 910, 911, 913, 914, 919, 921, 923, 924, 925, 928, 929, 931, 932, 933, 934, 935, 941, 942, 943, 948, 949, 951, 953, 955, 956, 958, 959, 960, 962, 963, 968, 972, 974, 975, 979, 982, 983, 993, 994, 995, 997, 1000, 1001, 1003, 1005, 1006, 1007, 1008, 1013, 1015, 1037, 1040, 1045, 1051, 1054, 1067, 1070, 1073, 1076, 1094, 1124, 1134, 1145, 1147, 1150, 1153, 1159, 1182, 1183, 1190, 1192, 1200, 1208, 1209, 1216, 1221, 1224, 1241, 1242, 1261, 1270, 1301, 1303, 1323, 1327, 1331, 1332, 1340, 1341, 1343, 1348, 1359, 1379, 1391, 1405, 1422, 1425, 1432, 1435, 1437, 1439, 1459, 1468, 1469, 1477, 1486, 1503, 1524, 1541, 1549, 1553, 1563, 1574, 1585, 1586, 1598, 1614, 1625, 1626, 1634, 1638, 1639, 1643, 1646, 1650, 1654, 1656, 1658, 1662, 1691, 1697, 1717, 1720, 1726, 1729, 1744, 1780, 1787, 1790, 1793, 1795, 1803, 1805, 1810, 1816, 1828, 1878, 1879, 1896, 1897, 1898, 1902, 1925, 1959, 1967, 1980, 1983, 1986, 1987, 2009, 2022, 2030, 2039, 2043, 2056, 2058, 2061, 2074, 2080, 2086, 2089, 2093, 2100, 2108, 2110, 2130, 2151, 2162, 2185, 2194, 2197, 2198, 2200, 2204, 2206, 2210, 2216, 2243, 2253, 2255, 2281, 2292, 2305, 2308, 2310, 2312, 2313, 2315, 2316, 2317, 2318, 2327, 2328, 2329, 2331, 2352, 2353, 2360, 2411, 2414, 2419, 2432, 2449, 2460, 2465, 2466, 2469, 2477, 2481, 2489, 2493, 2522, 2525, 2526, 2528, 2541, 2543, 2554, 2563, 2564, 2565, 2568, 2586, 2595, 2601, 2617, 2621, 2626, 2627, 2645, 2660, 2679, 2713, 2718, 2719, 2732, 2737, 2741, 2743, 2753, 2767, 2778, 2786, 2790, 2805, 2806, 2828, 2830, 2831, 2835, 2845, 2852, 2854, 2877, 2882, 2883, 2888, 2890, 2896, 2898, 2914, 2917, 2930, 2932, 2948, 2992, 3022, 3023, 3026, 3028, 3035, 3050, 3052, 3055, 3058, 3068, 3075, 3077, 3092, 3099, 3109, 3115, 3123, 3126, 3134, 3147, 3191, 3198, 3199, 3201, 3209, 3210, 3218, 3226, 3234, 3244, 3245, 3247, 3261, 3262, 3273, 3275, 3281, 3283, 3286, 3289, 3291, 3310, 3312, 3313, 3330, 3332, 3343, 3345, 3348, 3349, 3350, 3351, 3352, 3353, 3355, 3359, 3360, 3368, 3370, 3371, 3373, 3389, 3391, 3397, 3400, 3426, 3431, 3437, 3438, 3455, 3456, 3468, 3471, 3474, 3480, 3485, 3495, 3519, 3525, 3531, 3535, 3536, 3538, 3540, 3543, 3547, 3557, 3581, 3593, 3595, 3634, 3635, 3641, 3651, 3659, 3677, 3679, 3680, 3682, 3697, 3711, 3715, 3741, 3753, 3787, 3794, 3801, 3804, 3828, 3831, 3838, 3937]
	# _
	pp=[3587,3589,3604,2070,2071,3608,2587,1053,542,3617,3108,2597,3110,3625,554,2311,558,559,2611,2314,3135,2912,1604,354,3155,3668,2647,3162,3163,1629,2654,3260,1648,2173,2176,534,1162,1165,2704,1682,2709,2201,2842,3269,2720,1700,678,3757,3613,3762,3256,3871,2236,2244,2245,1736,3280,1747,3620,3450,2277,2282,2285,2798,1777,2295,3841,1799,1802,268,2323,1815,2841,1818,3119,1821,2335,2848,1313,3886,2867,3381,3382,2361,3903,1864,1868,2383,3411,1880,1885,1374,1253,2400,1889,2402,1892,3944,2410,2927,2416,2417,378,379,3460,3461,3465,2444,400,2963,409,418,1445,422,425,426,3501,3059,440,3002,3010,456,3916,2506,1271,3534,466,3029,1501,1505,3046,2023,3560,493,3054,2035,2041,3066]
	pp+=[2311,267,2361,387,400,459,464,469,471,473,477,478,549,565,579,586,2735,2755,3881,3900,3901,3949,1417,1419,1421,1438,1441,1444,1457,1472,1475,1500,3549,1507,1510,1540,1579,1594,1595,1602,1615,1620,1642,1647,2375,3843,3851,3874,3882,3894,3915,3943,3945]
	pp+=[5, 26, 28, 36, 38, 55, 69, 70, 72, 75, 80, 83, 86, 91, 141, 158, 178, 245, 259, 273, 322, 327, 330, 335, 337, 338, 339, 340, 342, 343, 344, 370, 389, 398, 405, 406, 409, 411, 414, 421, 432, 433, 448, 452, 463, 472, 481, 485, 489, 496, 501, 509, 519, 531, 533, 535, 536, 550, 552, 554, 562, 566, 567, 571, 585, 590, 599, 606, 608, 613, 617, 637, 640, 691, 695, 706, 708, 830, 841, 871, 883, 890, 912, 957, 976, 996, 998, 1039, 1048, 1058, 1062, 1066, 1068, 1078, 1089, 1109, 1111, 1122, 1126, 1129, 1132, 1140, 1166, 1170, 1172, 1173, 1175, 1178, 1183, 1196, 1197, 1219, 1228, 1230, 1244, 1245, 1246, 1247, 1250, 1252, 1253, 1258, 1263, 1287, 1304, 1308, 1309, 1310, 1312, 1316, 1320, 1322, 1326, 1329, 1330, 1336, 1353, 1355, 1362, 1363, 1367, 1368, 1380, 1394, 1402, 1410, 1415, 1458, 1460, 1464, 1471, 1473, 1474, 1492, 1518, 1519, 1543, 1547, 1550, 1554, 1556, 1557, 1576, 1577, 1580, 1592, 1604, 1607, 1616, 1619, 1640, 1643, 1652, 1653, 1683, 1684, 1690, 1702, 1704, 1710, 1722, 1730, 1733, 1739, 1748, 1752, 1753, 1754, 1755, 1763, 1779, 1784, 1796, 1799, 1811, 1814, 1831, 1833, 1835, 1836, 1837, 1843, 1850, 1851, 1852, 1862, 1863, 1868, 1874, 1875, 1877, 1882, 1888, 1890, 1891, 1893, 1894, 1901, 1906, 1908, 1912, 1916, 1926, 1936, 1937, 1939, 1944, 1947, 1950, 1951, 1956, 1963, 1964, 1968, 1977, 1981, 1985, 1989, 1995, 1996, 1997, 2002, 2006, 2034, 2041, 2052, 2060, 2072, 2076, 2077, 2081, 2083, 2088, 2093, 2094, 2096, 2097, 2098, 2099, 2104, 2106, 2107, 2116, 2117, 2118, 2121, 2122, 2127, 2131, 2133, 2136, 2142, 2143, 2152, 2153, 2154, 2155, 2156, 2159, 2165, 2182, 2184, 2205, 2207, 2213, 2217, 2219, 2220, 2222, 2225, 2226, 2227, 2230, 2244, 2245, 2248, 2259, 2261, 2267, 2268, 2271, 2272, 2273, 2274, 2277, 2278, 2279, 2282, 2283, 2288, 2289, 2291, 2294, 2300, 2302, 2304, 2322, 2325, 2339, 2368, 2370, 2373, 2380, 2384, 2385, 2399, 2403, 2404, 2405, 2420, 2422, 2425, 2429, 2430, 2434, 2435, 2439, 2440, 2442, 2445, 2446, 2447, 2482, 2496, 2497, 2509, 2524, 2549, 2550, 2551, 2573, 2579, 2584, 2596, 2597, 2604, 2606, 2607, 2619, 2634, 2640, 2641, 2643, 2647, 2648, 2657, 2658, 2662, 2672, 2684, 2687, 2694, 2706, 2707, 2709, 2711, 2716, 2723, 2742, 2745, 2747, 2749, 2750, 2756, 2757, 2758, 2761, 2766, 2768, 2772, 2773, 2774, 2775, 2788, 2789, 2793, 2798, 2808, 2816, 2817, 2822, 2834, 2837, 2844, 2848, 2850, 2851, 2862, 2864, 2869, 2870, 2893, 2894, 2897, 2907, 2909, 2913, 2918, 2926, 2933, 2943, 2946, 2959, 2960, 2961, 2968, 2969, 2973, 2977, 2985, 2986, 2989, 2995, 3001, 3006, 3007, 3009, 3014, 3017, 3041, 3046, 3052, 3053, 3084, 3113, 3120, 3124, 3141, 3145, 3148, 3150, 3151, 3152, 3162, 3167, 3170, 3171, 3172, 3173, 3175, 3184, 3191, 3194, 3204, 3213, 3214, 3216, 3227, 3229, 3233, 3235, 3242, 3246, 3251, 3252, 3253, 3259, 3260, 3262, 3269, 3287, 3290, 3295, 3297, 3305, 3309, 3317, 3318, 3321, 3327, 3331, 3333, 3335, 3356, 3364, 3384, 3386, 3388, 3390, 3392, 3398, 3404, 3411, 3412, 3413, 3414, 3415, 3424, 3430, 3434, 3439, 3440, 3441, 3442, 3444, 3450, 3457, 3461, 3462, 3494, 3498, 3502, 3506, 3507, 3509, 3510, 3515, 3524, 3539, 3546, 3558, 3559, 3561, 3564, 3566, 3568, 3571, 3576, 3583, 3589, 3592, 3599, 3609, 3619, 3620, 3622, 3623, 3625, 3631, 3640, 3642, 3645, 3648, 3650, 3653, 3663, 3667, 3670, 3683, 3685, 3690, 3691, 3695, 3698, 3701, 3707, 3712, 3714, 3717, 3722, 3723, 3731, 3739, 3740, 3742, 3743, 3749, 3751, 3758, 3761, 3767, 3772, 3773, 3774, 3777, 3789, 3793, 3795, 3797, 3800, 3809, 3820, 3844, 3850, 3858, 3861, 3873, 3875, 3876, 3877, 3880, 3887, 3890, 3899, 3905, 3911, 3912, 3913, 3914, 3916, 3917, 3918, 3922, 3925, 3927, 3928, 3933, 3944, 3950, 3951, 3952]
	remaining_list=[5, 7, 8, 10, 12, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 44, 45, 46, 49, 55, 57, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 72, 73, 75, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 91, 92, 93, 94, 99, 106, 109, 110, 111, 112, 113, 114, 118, 120, 123, 129, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 151, 154, 158, 159, 160, 161, 162, 163, 164, 166, 169, 173, 177, 178, 179, 180, 181, 182, 183, 185, 187, 189, 190, 191, 193, 194, 197, 199, 202, 204, 206, 207, 209, 210, 212, 216, 218, 220, 221, 224, 225, 226, 227, 231, 234, 240, 242, 243, 245, 254, 255, 256, 257, 258, 259, 263, 266, 267, 268, 271, 272, 273, 277, 278, 279, 280, 281, 284, 290, 293, 308, 309, 310, 312, 313, 314, 315, 316, 318, 319, 322, 323, 324, 325, 327, 329, 330, 333, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 395, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 427, 428, 430, 431, 432, 433, 435, 436, 438, 439, 440, 442, 443, 444, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 509, 510, 511, 512, 513, 515, 516, 517, 519, 520, 521, 524, 525, 527, 529, 531, 533, 534, 535, 536, 537, 538, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 574, 575, 578, 579, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 599, 603, 608, 609, 611, 612, 613, 617, 618, 621, 622, 624, 626, 627, 629, 631, 633, 635, 637, 640, 643, 645, 647, 648, 650, 651, 661, 668, 678, 679, 690, 691, 695, 697, 705, 706, 708, 716, 718, 721, 740, 745, 750, 758, 763, 770, 771, 778, 786, 795, 815, 816, 819, 820, 822, 829, 830, 835, 840, 841, 853, 855, 856, 858, 860, 866, 869, 870, 871, 872, 873, 876, 881, 883, 884, 889, 890, 891, 905, 912, 936, 944, 952, 954, 957, 966, 967, 976, 980, 984, 986, 996, 998, 1011, 1014, 1027, 1031, 1033, 1034, 1036, 1039, 1041, 1042, 1043, 1044, 1047, 1048, 1049, 1050, 1053, 1056, 1057, 1058, 1059, 1060, 1062, 1063, 1064, 1065, 1066, 1068, 1069, 1071, 1074, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1088, 1089, 1090, 1091, 1092, 1093, 1095, 1096, 1098, 1099, 1101, 1102, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1135, 1136, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1146, 1148, 1149, 1154, 1155, 1156, 1157, 1158, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1181, 1184, 1185, 1186, 1188, 1191, 1193, 1195, 1196, 1197, 1198, 1199, 1202, 1203, 1204, 1205, 1206, 1207, 1210, 1211, 1212, 1213, 1214, 1215, 1217, 1219, 1222, 1223, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1240, 1243, 1244, 1245, 1246, 1247, 1249, 1250, 1251, 1252, 1253, 1255, 1256, 1257, 1258, 1260, 1262, 1263, 1264, 1265, 1266, 1269, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1294, 1296, 1297, 1298, 1299, 1300, 1302, 1304, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1319, 1320, 1322, 1325, 1326, 1328, 1329, 1330, 1333, 1337, 1338, 1342, 1344, 1345, 1346, 1347, 1349, 1350, 1352, 1353, 1354, 1355, 1356, 1357, 1360, 1362, 1363, 1364, 1366, 1367, 1368, 1369, 1370, 1371, 1373, 1374, 1376, 1378, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1392, 1394, 1395, 1396, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1406, 1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415, 1417, 1418, 1419, 1420, 1421, 1423, 1424, 1427, 1429, 1430, 1431, 1433, 1434, 1436, 1438, 1440, 1441, 1442, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1471, 1472, 1473, 1474, 1475, 1476, 1480, 1481, 1483, 1485, 1487, 1488, 1489, 1490, 1491, 1492, 1493, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 1504, 1505, 1506, 1507, 1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518, 1519, 1520, 1521, 1523, 1525, 1526, 1527, 1529, 1530, 1531, 1532, 1533, 1534, 1535, 1538, 1540, 1542, 1543, 1544, 1545, 1546, 1547, 1548, 1550, 1552, 1554, 1556, 1557, 1560, 1561, 1562, 1566, 1567, 1568, 1570, 1571, 1572, 1573, 1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582, 1583, 1584, 1587, 1588, 1589, 1590, 1591, 1592, 1593, 1594, 1595, 1596, 1597, 1599, 1602, 1603, 1604, 1605, 1606, 1607, 1608, 1609, 1610, 1611, 1612, 1613, 1615, 1616, 1617, 1618, 1619, 1620, 1621, 1622, 1623, 1624, 1628, 1629, 1630, 1631, 1632, 1635, 1637, 1640, 1641, 1642, 1644, 1645, 1647, 1648, 1649, 1651, 1652, 1653, 1655, 1659, 1660, 1661, 1663, 1664, 1665, 1666, 1667, 1668, 1669, 1670, 1671, 1674, 1675, 1676, 1677, 1678, 1681, 1682, 1683, 1684, 1685, 1686, 1687, 1688, 1689, 1690, 1692, 1694, 1695, 1696, 1698, 1699, 1700, 1701, 1703, 1704, 1705, 1706, 1707, 1708, 1709, 1710, 1711, 1713, 1714, 1715, 1716, 1718, 1719, 1722, 1723, 1724, 1725, 1727, 1728, 1730, 1731, 1732, 1733, 1734, 1735, 1736, 1737, 1738, 1739, 1740, 1741, 1742, 1743, 1745, 1747, 1748, 1749, 1750, 1751, 1752, 1753, 1754, 1755, 1756, 1757, 1758, 1759, 1760, 1762, 1763, 1764, 1765, 1766, 1768, 1770, 1771, 1772, 1773, 1776, 1777, 1778, 1779, 1782, 1783, 1784, 1785, 1786, 1788, 1789, 1792, 1794, 1796, 1797, 1798, 1799, 1800, 1801, 1802, 1804, 1806, 1807, 1811, 1812, 1813, 1814, 1815, 1817, 1818, 1819, 1820, 1821, 1822, 1823, 1824, 1825, 1826, 1827, 1829, 1830, 1831, 1832, 1833, 1834, 1835, 1836, 1837, 1838, 1839, 1840, 1841, 1842, 1843, 1844, 1845, 1846, 1847, 1848, 1849, 1850, 1851, 1852, 1854, 1855, 1857, 1858, 1860, 1861, 1862, 1863, 1864, 1865, 1866, 1867, 1868, 1869, 1870, 1871, 1872, 1874, 1875, 1877, 1880, 1882, 1884, 1885, 1886, 1888, 1889, 1890, 1891, 1892, 1893, 1894, 1895, 1899, 1900, 1901, 1903, 1904, 1905, 1906, 1907, 1908, 1909, 1910, 1911, 1912, 1914, 1915, 1916, 1917, 1918, 1919, 1920, 1921, 1922, 1923, 1924, 1926, 1927, 1928, 1929, 1930, 1931, 1932, 1933, 1934, 1935, 1936, 1937, 1938, 1939, 1940, 1941, 1942, 1943, 1944, 1945, 1946, 1947, 1948, 1949, 1950, 1951, 1952, 1954, 1955, 1956, 1962, 1963, 1964, 1966, 1968, 1969, 1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978, 1979, 1981, 1982, 1984, 1985, 1988, 1989, 1990, 1991, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2023, 2024, 2025, 2026, 2029, 2031, 2033, 2034, 2035, 2036, 2037, 2038, 2040, 2041, 2042, 2044, 2045, 2046, 2047, 2048, 2049, 2050, 2051, 2052, 2053, 2054, 2057, 2059, 2060, 2062, 2064, 2065, 2066, 2067, 2068, 2069, 2070, 2071, 2072, 2073, 2075, 2076, 2077, 2078, 2079, 2081, 2082, 2083, 2084, 2085, 2087, 2088, 2090, 2091, 2092, 2094, 2095, 2096, 2097, 2098, 2099, 2101, 2102, 2103, 2104, 2105, 2106, 2107, 2109, 2111, 2112, 2113, 2114, 2115, 2116, 2117, 2118, 2119, 2120, 2121, 2122, 2123, 2124, 2125, 2126, 2127, 2128, 2129, 2131, 2132, 2133, 2134, 2135, 2136, 2137, 2138, 2139, 2140, 2142, 2143, 2144, 2145, 2146, 2147, 2148, 2149, 2150, 2152, 2153, 2154, 2155, 2156, 2157, 2159, 2160, 2161, 2163, 2164, 2165, 2166, 2167, 2168, 2169, 2170, 2171, 2172, 2173, 2175, 2176, 2177, 2178, 2179, 2180, 2181, 2182, 2183, 2184, 2186, 2187, 2188, 2189, 2190, 2191, 2192, 2193, 2195, 2196, 2199, 2201, 2202, 2203, 2205, 2207, 2208, 2209, 2211, 2212, 2213, 2215, 2217, 2219, 2220, 2221, 2222, 2223, 2225, 2226, 2227, 2228, 2229, 2230, 2231, 2232, 2233, 2234, 2235, 2236, 2237, 2238, 2240, 2241, 2242, 2244, 2245, 2246, 2247, 2248, 2250, 2251, 2252, 2254, 2256, 2258, 2259, 2260, 2261, 2262, 2263, 2264, 2265, 2266, 2267, 2268, 2269, 2270, 2271, 2272, 2273, 2274, 2275, 2277, 2278, 2279, 2280, 2282, 2283, 2284, 2285, 2286, 2287, 2288, 2289, 2290, 2291, 2294, 2295, 2296, 2297, 2298, 2299, 2300, 2301, 2302, 2303, 2304, 2306, 2311, 2314, 2319, 2320, 2321, 2322, 2323, 2324, 2325, 2326, 2330, 2332, 2333, 2335, 2336, 2337, 2339, 2340, 2342, 2343, 2344, 2346, 2347, 2348, 2349, 2351, 2355, 2357, 2359, 2361, 2362, 2364, 2365, 2366, 2367, 2368, 2369, 2370, 2371, 2373, 2374, 2375, 2376, 2377, 2378, 2379, 2380, 2381, 2382, 2383, 2384, 2385, 2386, 2387, 2388, 2389, 2390, 2391, 2392, 2393, 2394, 2395, 2396, 2399, 2400, 2401, 2402, 2403, 2404, 2405, 2406, 2407, 2408, 2409, 2410, 2412, 2413, 2415, 2416, 2417, 2418, 2420, 2421, 2422, 2423, 2424, 2425, 2426, 2428, 2429, 2430, 2431, 2433, 2434, 2435, 2436, 2437, 2438, 2439, 2440, 2441, 2442, 2443, 2444, 2445, 2446, 2447, 2448, 2450, 2451, 2452, 2453, 2454, 2455, 2456, 2457, 2458, 2459, 2461, 2462, 2463, 2464, 2467, 2470, 2471, 2472, 2473, 2474, 2475, 2476, 2478, 2479, 2480, 2482, 2483, 2485, 2486, 2487, 2488, 2490, 2491, 2494, 2495, 2496, 2497, 2499, 2500, 2501, 2502, 2503, 2504, 2505, 2506, 2508, 2509, 2510, 2511, 2512, 2513, 2515, 2516, 2517, 2518, 2519, 2520, 2521, 2523, 2524, 2527, 2530, 2531, 2532, 2533, 2534, 2535, 2539, 2540, 2542, 2545, 2546, 2547, 2548, 2549, 2550, 2551, 2552, 2553, 2555, 2556, 2557, 2559, 2560, 2561, 2562, 2569, 2570, 2571, 2572, 2573, 2574, 2575, 2576, 2577, 2578, 2579, 2580, 2581, 2582, 2583, 2584, 2585, 2587, 2588, 2589, 2590, 2591, 2592, 2593, 2594, 2596, 2597, 2598, 2599, 2600, 2602, 2603, 2604, 2605, 2606, 2607, 2608, 2609, 2610, 2611, 2612, 2613, 2614, 2615, 2616, 2618, 2619, 2620, 2622, 2623, 2624, 2628, 2629, 2630, 2631, 2632, 2633, 2634, 2636, 2637, 2638, 2639, 2640, 2641, 2642, 2643, 2644, 2647, 2648, 2649, 2650, 2651, 2652, 2653, 2654, 2655, 2656, 2657, 2658, 2659, 2661, 2662, 2663, 2664, 2665, 2666, 2667, 2668, 2669, 2670, 2671, 2672, 2673, 2674, 2675, 2676, 2677, 2678, 2680, 2681, 2682, 2683, 2684, 2685, 2686, 2687, 2689, 2690, 2691, 2692, 2694, 2695, 2696, 2697, 2698, 2701, 2702, 2703, 2704, 2706, 2707, 2708, 2709, 2710, 2711, 2712, 2714, 2715, 2716, 2717, 2720, 2721, 2722, 2723, 2724, 2725, 2726, 2727, 2729, 2730, 2731, 2733, 2734, 2735, 2738, 2739, 2740, 2742, 2744, 2745, 2747, 2748, 2749, 2750, 2751, 2752, 2754, 2755, 2756, 2757, 2758, 2759, 2760, 2761, 2762, 2763, 2764, 2765, 2766, 2768, 2770, 2771, 2772, 2773, 2774, 2775, 2776, 2777, 2779, 2780, 2781, 2782, 2783, 2784, 2785, 2787, 2788, 2789, 2791, 2792, 2793, 2794, 2795, 2796, 2797, 2798, 2799, 2800, 2801, 2802, 2803, 2804, 2807, 2808, 2809, 2811, 2812, 2813, 2814, 2816, 2817, 2818, 2820, 2821, 2822, 2823, 2824, 2826, 2832, 2833, 2834, 2836, 2837, 2838, 2839, 2841, 2842, 2843, 2844, 2846, 2847, 2848, 2850, 2851, 2853, 2855, 2856, 2857, 2858, 2859, 2860, 2862, 2863, 2864, 2865, 2866, 2867, 2869, 2870, 2872, 2874, 2875, 2878, 2879, 2880, 2884, 2885, 2886, 2887, 2889, 2891, 2892, 2893, 2894, 2895, 2897, 2899, 2900, 2901, 2902, 2903, 2904, 2905, 2906, 2907, 2908, 2909, 2910, 2911, 2912, 2913, 2915, 2916, 2918, 2919, 2920, 2921, 2922, 2923, 2924, 2925, 2926, 2927, 2928, 2929, 2931, 2933, 2934, 2935, 2936, 2937, 2938, 2939, 2940, 2941, 2942, 2943, 2944, 2945, 2946, 2947, 2949, 2950, 2951, 2952, 2953, 2954, 2956, 2957, 2958, 2959, 2960, 2961, 2963, 2964, 2965, 2966, 2967, 2968, 2969, 2970, 2971, 2972, 2973, 2974, 2975, 2976, 2977, 2978, 2979, 2980, 2981, 2982, 2983, 2984, 2985, 2986, 2987, 2988, 2989, 2990, 2991, 2993, 2994, 2995, 2996, 2997, 2998, 2999, 3000, 3001, 3002, 3003, 3004, 3005, 3006, 3007, 3008, 3009, 3010, 3011, 3012, 3013, 3014, 3015, 3016, 3017, 3018, 3019, 3020, 3021, 3024, 3025, 3027, 3029, 3030, 3032, 3033, 3034, 3036, 3037, 3038, 3039, 3041, 3042, 3043, 3044, 3045, 3046, 3047, 3048, 3049, 3051, 3053, 3054, 3056, 3057, 3059, 3061, 3062, 3063, 3064, 3065, 3066, 3067, 3069, 3070, 3071, 3072, 3073, 3074, 3076, 3078, 3079, 3080, 3081, 3082, 3083, 3084, 3085, 3086, 3087, 3089, 3090, 3091, 3093, 3094, 3095, 3096, 3097, 3098, 3100, 3101, 3103, 3104, 3105, 3106, 3108, 3110, 3112, 3113, 3114, 3116, 3117, 3118, 3119, 3120, 3121, 3122, 3124, 3125, 3128, 3129, 3130, 3131, 3132, 3133, 3135, 3136, 3137, 3138, 3139, 3140, 3141, 3142, 3143, 3144, 3145, 3146, 3148, 3149, 3150, 3151, 3152, 3154, 3155, 3156, 3157, 3158, 3159, 3160, 3161, 3162, 3163, 3164, 3166, 3167, 3168, 3169, 3170, 3171, 3172, 3173, 3174, 3175, 3176, 3177, 3178, 3179, 3180, 3181, 3182, 3183, 3184, 3186, 3188, 3190, 3192, 3193, 3194, 3195, 3196, 3197, 3202, 3203, 3204, 3206, 3208, 3211, 3212, 3213, 3214, 3216, 3217, 3219, 3220, 3221, 3222, 3223, 3224, 3225, 3227, 3228, 3229, 3230, 3231, 3232, 3233, 3235, 3236, 3237, 3238, 3240, 3241, 3242, 3243, 3246, 3248, 3249, 3250, 3251, 3252, 3253, 3254, 3255, 3256, 3258, 3259, 3260, 3263, 3264, 3265, 3266, 3267, 3268, 3269, 3270, 3271, 3272, 3274, 3276, 3277, 3278, 3279, 3280, 3282, 3284, 3285, 3287, 3288, 3290, 3292, 3293, 3294, 3295, 3296, 3297, 3298, 3299, 3300, 3301, 3302, 3303, 3304, 3305, 3306, 3307, 3308, 3309, 3311, 3314, 3315, 3316, 3317, 3318, 3319, 3320, 3321, 3322, 3324, 3325, 3326, 3327, 3328, 3329, 3331, 3333, 3334, 3335, 3336, 3337, 3338, 3339, 3340, 3341, 3342, 3344, 3346, 3356, 3358, 3363, 3364, 3365, 3366, 3367, 3369, 3372, 3374, 3375, 3377, 3378, 3379, 3380, 3381, 3382, 3383, 3384, 3385, 3386, 3387, 3388, 3390, 3392, 3393, 3394, 3395, 3396, 3398, 3401, 3402, 3403, 3404, 3405, 3406, 3407, 3408, 3409, 3410, 3411, 3412, 3413, 3414, 3415, 3416, 3417, 3418, 3419, 3420, 3421, 3422, 3423, 3424, 3425, 3427, 3428, 3429, 3430, 3432, 3434, 3436, 3439, 3440, 3441, 3442, 3444, 3445, 3446, 3447, 3448, 3449, 3450, 3451, 3452, 3453, 3454, 3457, 3458, 3460, 3461, 3462, 3465, 3466, 3472, 3473, 3476, 3478, 3479, 3481, 3482, 3483, 3484, 3486, 3487, 3488, 3489, 3490, 3491, 3492, 3493, 3494, 3496, 3498, 3500, 3501, 3502, 3503, 3504, 3505, 3506, 3507, 3508, 3509, 3510, 3511, 3512, 3513, 3514, 3515, 3516, 3517, 3521, 3522, 3523, 3524, 3526, 3527, 3528, 3529, 3530, 3532, 3533, 3534, 3537, 3539, 3541, 3542, 3544, 3545, 3546, 3548, 3549, 3550, 3551, 3554, 3555, 3556, 3558, 3559, 3560, 3561, 3562, 3563, 3564, 3566, 3567, 3568, 3569, 3570, 3571, 3572, 3573, 3574, 3575, 3576, 3577, 3578, 3579, 3580, 3582, 3583, 3584, 3585, 3586, 3587, 3588, 3589, 3590, 3591, 3592, 3596, 3597, 3598, 3599, 3600, 3601, 3602, 3603, 3604, 3606, 3607, 3608, 3609, 3610, 3611, 3612, 3613, 3614, 3615, 3616, 3617, 3618, 3619, 3620, 3621, 3622, 3623, 3624, 3625, 3626, 3627, 3628, 3629, 3630, 3631, 3633, 3636, 3637, 3638, 3639, 3640, 3642, 3643, 3644, 3645, 3646, 3647, 3648, 3649, 3650, 3652, 3653, 3654, 3655, 3656, 3657, 3658, 3660, 3661, 3662, 3663, 3664, 3665, 3666, 3667, 3668, 3669, 3670, 3671, 3672, 3673, 3675, 3676, 3678, 3681, 3683, 3684, 3685, 3686, 3687, 3688, 3689, 3690, 3691, 3694, 3695, 3698, 3699, 3700, 3701, 3702, 3703, 3705, 3706, 3707, 3708, 3709, 3712, 3714, 3716, 3717, 3718, 3720, 3721, 3722, 3723, 3724, 3725, 3726, 3727, 3728, 3729, 3730, 3731, 3732, 3733, 3735, 3736, 3737, 3739, 3740, 3743, 3744, 3745, 3746, 3747, 3748, 3749, 3750, 3751, 3752, 3754, 3755, 3756, 3757, 3758, 3759, 3760, 3761, 3762, 3763, 3764, 3765, 3766, 3767, 3768, 3769, 3770, 3771, 3772, 3773, 3774, 3775, 3776, 3777, 3778, 3779, 3780, 3781, 3782, 3783, 3784, 3785, 3786, 3789, 3790, 3791, 3792, 3793, 3795, 3796, 3797, 3798, 3799, 3800, 3802, 3803, 3805, 3806, 3807, 3808, 3809, 3810, 3811, 3812, 3813, 3814, 3815, 3816, 3817, 3818, 3819, 3820, 3821, 3822, 3825, 3826, 3827, 3829, 3832, 3835, 3836, 3837, 3839, 3840, 3841, 3843, 3844, 3845, 3846, 3847, 3848, 3849, 3850, 3851, 3852, 3853, 3854, 3855, 3856, 3857, 3858, 3859, 3860, 3861, 3862, 3863, 3864, 3865, 3866, 3867, 3868, 3869, 3870, 3871, 3872, 3873, 3874, 3875, 3876, 3877, 3878, 3879, 3880, 3881, 3882, 3883, 3884, 3885, 3886, 3887, 3888, 3890, 3891, 3892, 3893, 3894, 3895, 3896, 3897, 3898, 3899, 3900, 3901, 3902, 3903, 3904, 3905, 3906, 3907, 3908, 3909, 3910, 3911, 3912, 3913, 3914, 3915, 3916, 3917, 3918, 3919, 3920, 3921, 3922, 3923, 3924, 3925, 3926, 3927, 3928, 3929, 3930, 3931, 3932, 3933, 3934, 3935, 3936, 3938, 3939, 3940, 3941, 3942, 3943, 3944, 3945, 3946, 3947, 3948, 3949, 3950, 3951, 3952]
	cur_file_list=[x for x in remaining_list if x not in pp]
	cur_file_list=new_from_svg=[245, 273, 335, 338, 339, 340, 342, 343, 354, 617, 640, 691, 695, 706, 830, 871, 890, 957, 976, 996, 998, 1166, 1173, 1219, 1438, 1441, 1556, 1989, 2094, 2131, 2165, 2173, 2225, 2274, 2314, 2370, 2380, 2946, 2968, 2985, 2986, 2995, 3173, 3214, 3233, 3333, 3381, 3386, 3461, 3691, 3717, 3731, 3740, 3841, 3951]
	cur_file_list.sort()
	cur_file=open('uniquesentences.txt','r')
	uniquesentences=cur_file.readlines()
	for cur_file_index in cur_file_list:
		cur_sent= uniquesentences[cur_file_index-1]
		cur_sent=cur_sent.strip()
		if len(cur_sent.split(" ")) > 2:
			print str(cur_file_index)+"$$"+cur_sent+"$$"
			pass
		pass
	pass

def get_lemma_pos_list(cur_word):
	# name, lemma_list, pos_list
	ret_list=[]
	pos_list=[]
	for cur_form in cur_word.forms:
		form_keys=cur_form.keys()
		for cur_key in form_keys:
			temp_string=str(cur_form[cur_key])
			if "http:sanskrit.inria" in temp_string:
				continue
				pass
			pos_list.append(cur_form[cur_key])
			pass
		pass
	lemma_list= cur_word.lemmas
	if '' in lemma_list :
		lemma_list.remove('')
		pass
	lemma_list=list(set(lemma_list))
	for cur_index in range(len(lemma_list)):
		if is_lemma_in_slp(lemma_list[cur_index]):
			continue
			pass
		lemma_list[cur_index]=utf_to_ascii((lemma_list[cur_index]).encode("raw_unicode_escape"))
		pass
	for cur_lemma in lemma_list:
		if '_' in cur_lemma:
			cur_lemma=cur_lemma.split('_')[0]
			pass
		for cur_morph_list in pos_list:
			if cur_morph_list.__class__.__name__ =='list':
				for cur_morph in cur_morph_list :
					if cur_morph.__class__.__name__ =='list':
						ret_list.append([ utf_to_ascii((cur_word.names).encode("raw_unicode_escape")), str(cur_lemma) , str(cur_morph[0])])
					else :
						ret_list.append([ utf_to_ascii((cur_word.names).encode("raw_unicode_escape")), str(cur_lemma) , str(cur_morph)])
					pass
				pass
			else :
				ret_list.append([ utf_to_ascii((cur_word.names).encode("raw_unicode_escape")), str(cur_lemma) , str(cur_morph_list)])
				pass
			pass
		pass
	return ret_list
	pass

def get_dcs_coverage(cur_tuple):
	cur_word=cur_tuple[0]
	cur_lemma=cur_tuple[1]
	cur_pos=cur_tuple[2]
	# word,lemma counts, garbage.
	ret_list=[0,0,0]
	if (cur_word in dcs_words_count_dict.keys()):
		ret_list[0]=dcs_words_count_dict[cur_word]
		pass
	if (cur_lemma in dcs_lemmas_count_dict.keys()):
		ret_list[1]=dcs_lemmas_count_dict[cur_lemma]
		pass	
	# if ret_list[1]==0:
	# 	cur_temp_str=cur_tuple[0]+"$$"+cur_tuple[1]
	# 	if cur_temp_str not in word_lemma_error_list:
	# 		word_lemma_error_list.append(cur_temp_str)
	# 		pass
	# 	pass
	return ret_list
	pass

def make_4k_pickle(cur_file_index):
	cur_file=pickle.load( open( "test/new/" + str(cur_file_index) + ".p", "rb" ) )
	cur_node_index=0
	node_dict={}
	for cur_index in range(len(cur_file.chunk)):
		cur_chunk=cur_file.chunk[cur_index]
		# for each of 11 chunks
		sorted_keys=cur_chunk.chunk_words.keys()
		sorted_keys.sort()
		if len(sorted_keys)==1:
			# anything goes
			# 0: ['tApasAnAm', 'tApasa', u'g. pl. m.', 0, [0, 250, 25]]
			cur_key=sorted_keys[0]
			for cur_word in cur_chunk.chunk_words[cur_key] :
				word_lemma_pos_list=get_lemma_pos_list(cur_word)
				if word_lemma_pos_list ==[]:
					node_dict[cur_node_index]=[utf_to_ascii((cur_chunk.chunk_name).encode("raw_unicode_escape")) , None ,None ,cur_index,[0,0,0,]]
					cur_node_index+=1
					continue
					pass
				for cur_tuple in word_lemma_pos_list:
					node_dict[cur_node_index]=cur_tuple+[cur_index,get_dcs_coverage(cur_tuple)]
					cur_node_index+=1
					pass
				pass
			pass
		else:
			# all possible ones that are not compounds.
			for cur_key in sorted_keys:
				for cur_word in cur_chunk.chunk_words[cur_key] :
					word_lemma_pos_list=get_lemma_pos_list(cur_word)
					if word_lemma_pos_list ==[]:
						node_dict[cur_node_index]=[utf_to_ascii((cur_chunk.chunk_name).encode("raw_unicode_escape")) , None ,None ,cur_index,[0,0,0,]]
						cur_node_index+=1
						continue
						pass
					if word_lemma_pos_list[0][2]=='iic.':
						continue
						pass
					for cur_tuple in word_lemma_pos_list:
						cur_tuple[0]=utf_to_ascii((cur_chunk.chunk_name).encode("raw_unicode_escape"))
						node_dict[cur_node_index]=cur_tuple+[cur_index,get_dcs_coverage(cur_tuple)]
						cur_node_index+=1
						pass
					pass
				pass
			pass
		pass
	cur_sent=get_gold_sent(cur_file_index)
	temp_list=[]
	for x in cur_sent.content_list :
		# name, POS, dep_tag, from_tag, to_tag
		temp_list.append([convert_to_word_index(x.from_tag)  , convert_to_word_index(x.to_tag)  , x.dep_tag])
		pass

	print "sentence:" + str(cur_file_index)
	print "--------------"
	key_list=node_dict.keys()
	key_list.sort()
	for cur_key in key_list  : 
		cur_node=node_dict[cur_key]
		print str(cur_key) + ":" + str(cur_node)
		pass
	print "++++++++++++++"
	print temp_list
	print "=============="
	return node_dict
	pass

def refiner():
	cur_file=open('refine_manual.txt','r')
	# svg_list=[9, 15, 47, 53, 59, 65, 71, 73, 74, 76, 81, 88, 92, 94, 99, 106, 108, 109, 110, 111, 112, 113, 122, 123, 129, 142, 143, 145, 147, 150, 152, 154, 155, 160, 165, 167, 169, 174, 177, 179, 180, 183, 185, 188, 197, 198, 200, 208, 212, 215, 216, 223, 225, 226, 227, 234, 235, 239, 240, 243, 245, 254, 255, 256, 257, 258, 262, 263, 264, 266, 270, 271, 272, 273, 277, 279, 280, 281, 282, 284, 290, 291, 292, 293, 296, 297, 298, 299, 306, 307, 308, 309, 310, 312, 313, 314, 316, 324, 326, 332, 333, 334, 335, 338, 339, 340, 341, 342, 343, 346, 347, 348, 350, 351, 354, 359, 404, 430, 474, 487, 488, 499, 522, 523, 526, 530, 541, 574, 575, 581, 589, 591, 592, 596, 602, 609, 617, 618, 619, 620, 622, 624, 626, 629, 631, 634, 635, 640, 642, 643, 645, 647, 648, 649, 651, 652, 661, 668, 669, 677, 679, 683, 685, 690, 691, 693, 695, 697, 702, 703, 705, 706, 709, 715, 716, 730, 740, 741, 745, 771, 775, 776, 781, 782, 783, 786, 815, 816, 819, 822, 824, 830, 835, 840, 847, 852, 853, 855, 856, 859, 860, 861, 865, 866, 869, 871, 872, 873, 881, 884, 890, 891, 919, 936, 941, 943, 944, 952, 953, 954, 957, 959, 963, 966, 968, 972, 976, 980, 984, 986, 993, 996, 997, 998, 1000, 1001, 1003, 1005, 1007, 1008, 1011, 1013, 1014, 1015, 1027, 1031, 1034, 1036, 1037, 1040, 1041, 1042, 1043, 1044, 1050, 1054, 1064, 1081, 1088, 1093, 1094, 1096, 1102, 1108, 1117, 1118, 1133, 1134, 1154, 1158, 1166, 1173, 1174, 1177, 1190, 1192, 1216, 1219, 1227, 1283, 1338, 1340, 1347, 1348, 1350, 1364, 1369, 1376, 1378, 1405, 1409, 1420, 1423, 1425, 1436, 1438, 1441, 1447, 1448, 1459, 1463, 1468, 1483, 1490, 1491, 1503, 1521, 1524, 1526, 1530, 1531, 1538, 1549, 1556, 1568, 1572, 1585, 1605, 1614, 1625, 1634, 1635, 1644, 1645, 1646, 1649, 1656, 1659, 1669, 1717, 1731, 1745, 1765, 1770, 1773, 1776, 1790, 1794, 1823, 1832, 1896, 1915, 1921, 1946, 1954, 1969, 1976, 1984, 1989, 1999, 2009, 2016, 2022, 2026, 2029, 2033, 2039, 2043, 2045, 2058, 2061, 2069, 2086, 2089, 2094, 2100, 2103, 2108, 2109, 2126, 2130, 2131, 2165, 2173, 2194, 2198, 2200, 2215, 2223, 2225, 2240, 2242, 2243, 2255, 2274, 2314, 2316, 2318, 2344, 2353, 2357, 2359, 2360, 2370, 2379, 2380, 2396, 2449, 2452, 2454, 2456, 2474, 2477, 2481, 2542, 2546, 2556, 2557, 2559, 2583, 2586, 2595, 2636, 2649, 2669, 2732, 2733, 2753, 2778, 2791, 2799, 2805, 2814, 2821, 2826, 2828, 2831, 2835, 2843, 2852, 2855, 2872, 2877, 2884, 2886, 2888, 2891, 2896, 2901, 2911, 2930, 2936, 2946, 2948, 2957, 2968, 2978, 2985, 2986, 2988, 2992, 2995, 2997, 3003, 3015, 3018, 3026, 3027, 3036, 3039, 3055, 3058, 3097, 3101, 3103, 3160, 3173, 3195, 3208, 3214, 3219, 3231, 3233, 3244, 3248, 3275, 3283, 3311, 3313, 3319, 3333, 3344, 3346, 3348, 3349, 3350, 3352, 3368, 3381, 3386, 3391, 3395, 3405, 3418, 3423, 3461, 3468, 3479, 3526, 3533, 3537, 3545, 3554, 3563, 3582, 3634, 3658, 3673, 3691, 3697, 3703, 3708, 3711, 3717, 3731, 3735, 3740, 3741, 3763, 3764, 3779, 3782, 3790, 3791, 3798, 3821, 3840, 3841, 3869, 3888, 3896, 3908, 3920, 3935, 3951]
	line_data=cur_file.readlines()
	cur_file_index=None
	cur_node_index=None
	node_dict={}
	edge_list=[]
	refined_dict={}
	for cur_line in line_data:
		if ("sentence:" in cur_line):
			# new sentence
			cur_file_index=int(cur_line.split(":")[1])
			cur_node_index=0
			node_dict={}
			edge_list=[]
			pass
		elif (":[" in cur_line):
			# new word
			print line_data.index(cur_line)
			print cur_line
			node_data=eval(cur_line.split(":")[1])
			node_dict[cur_node_index]=node_data
			cur_node_index+=1
			pass
		elif ("[[" in cur_line):
			# edge_list
			print line_data.index(cur_line)
			print cur_line
			edge_list=eval(cur_line)
			if cur_file_index in svg_list:
				refined_dict[cur_file_index]=[node_dict, edge_list, edge_list]
				pass
			if len(node_dict.keys())!=(cur_node_index):
				print "fatal error "
				exit()
				pass
			cur_node_index=None
			pass
		pass
	for cur_key in refined_dict.keys():
		print "sentence : "+str(cur_key)
	# 	print "----------------------"
	# 	print str(refined_dict[cur_key][0])
	# 	print "++++++++++++++++++++++"
	# 	print str(refined_dict[cur_key][1])
	# 	print "======================"
		pass
	print len(refined_dict.keys())
	pickle.dump(refined_dict,open('manual_refined_dict.p' , 'w'))
	pass

def convert_to_word_index(a_string):
	if is_int(a_string):
		return int(a_string) -1
		pass
	else :
		return None
		pass
	pass

def print_gold_tree(cur_sent_id):
	cur_sent=get_gold_sent(cur_sent_id)
	if cur_sent==None:
		return None
		pass
	temp_list=[]
	for x in cur_sent.content_list :
		# name, POS, dep_tag, from_tag, to_tag
		temp_list.append([convert_to_word_index(x.from_tag)  , convert_to_word_index(x.to_tag)  , x.dep_tag])
		pass
	print "sentence:" + str(cur_sent_id)
	print "++++++++++++++"
	print temp_list
	print "=============="
	return temp_list
	pass

def get_dcs_lemma_coverage_gold():
	# svg_gold_dict=pickle.load(open( "svg_gold_dict.p" , 'rb'))
	# svg_gold_dict=pickle.load(open( "manual_refined_dict.p" , 'rb'))
	svg_gold_dict=pickle.load(open( "sisu_gold_dict.p" , 'rb'))	
	file_list=svg_gold_dict.keys()
	file_list.sort()
	not_in_dcs_stats={}
	for cur_file_index in file_list:
		node_dict=svg_gold_dict[cur_file_index][0]
		key_list=node_dict.keys()
		key_list.sort()
		not_in_dcs_node_count=0
		for cur_key in key_list:
			cur_node=node_dict[cur_key]
			cur_data=get_dcs_coverage(cur_node[:3])
			if cur_data[1]==0:
				# not in dcs
				not_in_dcs_node_count+=1
				pass
			else :
				# in dcs
				pass
			pass
		if not_in_dcs_node_count in not_in_dcs_stats.keys():
			not_in_dcs_stats[not_in_dcs_node_count]+=[cur_file_index]
			pass
		else:
			not_in_dcs_stats[not_in_dcs_node_count]=[cur_file_index]
			pass
		pass
	key_list=not_in_dcs_stats.keys()
	key_list.sort()
	print str(0)+" :"+str(len(not_in_dcs_stats[0]))
	all_lemmas_in_dcs_files_list=not_in_dcs_stats[0]
	look_for_patterns_list=[]
	for cur_key in key_list[1:]:
		print str(cur_key)+" :"+str(len(not_in_dcs_stats[cur_key]))
		look_for_patterns_list+=not_in_dcs_stats[cur_key]
		pass
	# all_lemmas_covered_dict={}
	all_lemmas_covered_dict=pickle.load(open( "all_lemmas_covered_dict.p" , 'rb'))
	for cur_key in all_lemmas_in_dcs_files_list:
		all_lemmas_covered_dict[cur_key+4000]=cpy.deepcopy(svg_gold_dict[cur_key])
		pass
	# look_for_cng_patterns_dict={}
	look_for_cng_patterns_dict=pickle.load(open( "look_for_cng_patterns_dict.p" , 'rb'))
	for cur_sent_id in look_for_patterns_list:
		print "-------------------------------"
		print "sentence : "+str(cur_sent_id)
		node_dict=svg_gold_dict[cur_sent_id][0]
		edge_list=svg_gold_dict[cur_sent_id][1]
		key_list=node_dict.keys()
		key_list.sort()
		cng_list=[]
		lemma_cng_list=[]
		lemma_new_lemma_list=[]
		for cur_key in key_list:
			cur_node=node_dict[cur_key]
			print cur_node
			cur_lemma=str(cur_node[1])
			cur_cng=wordTypeCheck(cur_node[2])
			if is_int(cur_cng):
				cur_cng=int(cur_cng)
				pass
			else :
				print "------------------"
				print "fatal error !!"
				cur_node
				print "------------------"
				pass
			cng_list.append(cur_cng)
			cur_data=get_dcs_coverage(cur_node[:3])
			if cur_data[1]==0:
				# lemma_cng tuples
				lemma_cng_list.append(tuple([cur_lemma, cur_cng]))
				# lemma_lemma tuples
				lemma_new_lemma_list.append(tuple([cur_lemma,None]))
				pass
			pass
		# cng_set
		cng_set=set(cng_list)
		print cng_list
		print cng_set
		print lemma_cng_list
		print lemma_new_lemma_list
		print "++++++++++++++++++++++++++++++++++++++++++"
		look_for_cng_patterns_dict[cur_sent_id+4000]=[node_dict, edge_list, cng_set, lemma_cng_list, lemma_new_lemma_list]
		pass
	pickle.dump(all_lemmas_covered_dict,open('all_lemmas_covered_dict.p' , 'w'))
	pickle.dump(look_for_cng_patterns_dict,open('look_for_cng_patterns_dict.p' , 'w'))
	pass

def sent_lists():
	svg_list=[9, 15, 47, 53, 59, 65, 71, 73, 74, 76, 81, 88, 92, 94, 99, 106, 108, 109, 110, 111, 112, 113, 122, 123, 129, 142, 143, 145, 147, 150, 152, 154, 155, 160, 165, 167, 169, 174, 177, 179, 180, 183, 185, 188, 197, 198, 200, 208, 212, 215, 216, 223, 225, 226, 227, 234, 235, 239, 240, 243, 245, 254, 255, 256, 257, 258, 262, 263, 264, 266, 270, 271, 272, 273, 277, 279, 280, 281, 282, 284, 290, 291, 292, 293, 296, 297, 298, 299, 306, 307, 308, 309, 310, 312, 313, 314, 316, 324, 326, 332, 333, 334, 335, 338, 339, 340, 341, 342, 343, 346, 347, 348, 350, 351, 354, 359, 404, 430, 474, 487, 488, 499, 522, 523, 526, 530, 541, 574, 575, 581, 589, 591, 592, 596, 602, 609, 617, 618, 619, 620, 622, 624, 626, 629, 631, 634, 635, 640, 642, 643, 645, 647, 648, 649, 651, 652, 661, 668, 669, 677, 679, 683, 685, 690, 691, 693, 695, 697, 702, 703, 705, 706, 709, 715, 716, 730, 740, 741, 745, 771, 775, 776, 781, 782, 783, 786, 815, 816, 819, 822, 824, 830, 835, 840, 847, 852, 853, 855, 856, 859, 860, 861, 865, 866, 869, 871, 872, 873, 881, 884, 890, 891, 919, 936, 941, 943, 944, 952, 953, 954, 957, 959, 963, 966, 968, 972, 976, 980, 984, 986, 993, 996, 997, 998, 1000, 1001, 1003, 1005, 1007, 1008, 1011, 1013, 1014, 1015, 1027, 1031, 1034, 1036, 1037, 1040, 1041, 1042, 1043, 1044, 1050, 1054, 1064, 1081, 1088, 1093, 1094, 1096, 1102, 1108, 1117, 1118, 1133, 1134, 1154, 1158, 1166, 1173, 1174, 1177, 1190, 1192, 1216, 1219, 1227, 1283, 1338, 1340, 1347, 1348, 1350, 1364, 1369, 1376, 1378, 1405, 1409, 1420, 1423, 1425, 1436, 1438, 1441, 1447, 1448, 1459, 1463, 1468, 1483, 1490, 1491, 1503, 1521, 1524, 1526, 1530, 1531, 1538, 1549, 1556, 1568, 1572, 1585, 1605, 1614, 1625, 1634, 1635, 1644, 1645, 1646, 1649, 1656, 1659, 1669, 1717, 1731, 1745, 1765, 1770, 1773, 1776, 1790, 1794, 1823, 1832, 1896, 1915, 1921, 1946, 1954, 1969, 1976, 1984, 1989, 1999, 2009, 2016, 2022, 2026, 2029, 2033, 2039, 2043, 2045, 2058, 2061, 2069, 2086, 2089, 2094, 2100, 2103, 2108, 2109, 2126, 2130, 2131, 2165, 2173, 2194, 2198, 2200, 2215, 2223, 2225, 2240, 2242, 2243, 2255, 2274, 2314, 2316, 2318, 2344, 2353, 2357, 2359, 2360, 2370, 2379, 2380, 2396, 2449, 2452, 2454, 2456, 2474, 2477, 2481, 2542, 2546, 2556, 2557, 2559, 2583, 2586, 2595, 2636, 2649, 2669, 2732, 2733, 2753, 2778, 2791, 2799, 2805, 2814, 2821, 2826, 2828, 2831, 2835, 2843, 2852, 2855, 2872, 2877, 2884, 2886, 2888, 2891, 2896, 2901, 2911, 2930, 2936, 2946, 2948, 2957, 2968, 2978, 2985, 2986, 2988, 2992, 2995, 2997, 3003, 3015, 3018, 3026, 3027, 3036, 3039, 3055, 3058, 3097, 3101, 3103, 3160, 3173, 3195, 3208, 3214, 3219, 3231, 3233, 3244, 3248, 3275, 3283, 3311, 3313, 3319, 3333, 3344, 3346, 3348, 3349, 3350, 3352, 3368, 3381, 3386, 3391, 3395, 3405, 3418, 3423, 3461, 3468, 3479, 3526, 3533, 3537, 3545, 3554, 3563, 3582, 3634, 3658, 3673, 3691, 3697, 3703, 3708, 3711, 3717, 3731, 3735, 3740, 3741, 3763, 3764, 3779, 3782, 3790, 3791, 3798, 3821, 3840, 3841, 3869, 3888, 3896, 3908, 3920, 3935, 3951]
	# svg_gold_dict=pickle.load(open( "svg_gold_dict.p" , 'rb'))
	manual_list=[1, 2, 3, 4, 6, 7, 8, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 29, 30, 31, 32, 33, 34, 35, 37, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 54, 56, 57, 58, 61, 62, 63, 64, 66, 67, 68, 77, 78, 79, 82, 84, 85, 87, 89, 90, 93, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 107, 114, 115, 117, 119, 120, 121, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 146, 148, 149, 151, 153, 156, 157, 159, 161, 162, 163, 164, 166, 168, 170, 171, 172, 173, 175, 176, 181, 182, 184, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 199, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 213, 214, 217, 218, 219, 220, 221, 222, 224, 228, 229, 230, 231, 232, 233, 236, 237, 238, 241, 242, 244, 246, 247, 248, 249, 250, 251, 252, 253, 261, 265, 269, 274, 275, 276, 278, 283, 285, 286, 287, 288, 289, 294, 295, 300, 301, 302, 303, 304, 305, 311, 315, 317, 318, 319, 320, 321, 323, 325, 328, 329, 331, 336, 345, 349, 353, 355, 356, 357, 358, 360, 361, 362, 363, 365, 366, 367, 368, 369, 371, 372, 373, 393, 397, 423, 434, 437, 441, 445, 446, 451, 458, 468, 470, 475, 476, 479, 480, 483, 484, 486, 490, 491, 492, 494, 498, 500, 502, 503, 504, 505, 506, 507, 508, 510, 512, 513, 514, 516, 517, 518, 520, 521, 524, 525, 527, 528, 529, 532, 537, 538, 539, 540, 543, 547, 548, 551, 553, 555, 556, 557, 561, 563, 564, 568, 569, 573, 576, 577, 578, 580, 583, 584, 587, 588, 593, 594, 597, 598, 600, 601, 603, 604, 605, 606, 607, 610, 611, 612, 614, 615, 621, 623, 625, 627, 628, 630, 632, 633, 636, 638, 639, 641, 644, 646, 650, 654, 655, 656, 657, 658, 659, 663, 664, 665, 672, 674, 675, 676, 680, 681, 682, 684, 686, 687, 688, 689, 692, 694, 696, 698, 699, 700, 701, 704, 707, 712, 713, 714, 717, 718, 719, 720, 721, 722, 723, 729, 731, 734, 737, 738, 742, 743, 746, 747, 748, 749, 750, 751, 752, 753, 756, 759, 761, 763, 764, 765, 766, 767, 768, 769, 770, 772, 773, 774, 777, 778, 779, 780, 784, 785, 787, 791, 792, 793, 795, 817, 818, 820, 821, 823, 825, 826, 827, 828, 829, 832, 833, 834, 836, 839, 842, 843, 844, 845, 846, 848, 849, 850, 851, 854, 857, 858, 862, 863, 864, 867, 868, 870, 874, 875, 876, 877, 879, 880, 882, 885, 886, 887, 888, 889, 909, 915, 916, 917, 918, 920, 922, 926, 927, 929, 930, 937, 938, 939, 940, 945, 946, 947, 950, 961, 964, 965, 967, 969, 970, 971, 973, 975, 977, 978, 981, 985, 987, 988, 989, 990, 991, 992, 999, 1002, 1004, 1006, 1009, 1010, 1012, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1028, 1029, 1030, 1032, 1033, 1035, 1038, 1045, 1046, 1047, 1049, 1051, 1052, 1055, 1057, 1060, 1061, 1063, 1065, 1067, 1069, 1070, 1071, 1072, 1074, 1075, 1077, 1079, 1080, 1082, 1083, 1084, 1085, 1086, 1087, 1090, 1091, 1092, 1095, 1097, 1098, 1099, 1100, 1103, 1104, 1105, 1106, 1107, 1110, 1112, 1113, 1114, 1115, 1116, 1119, 1120, 1121, 1123, 1124, 1125, 1127, 1128, 1130, 1131, 1135, 1136, 1137, 1138, 1142, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1155, 1156, 1157, 1159, 1160, 1161, 1163, 1164, 1167, 1168, 1169, 1171, 1176, 1179, 1180, 1181, 1182, 1183, 1187, 1189, 1194, 1198, 1199, 1200, 1201, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1217, 1218, 1220, 1222, 1223, 1224, 1225, 1226, 1229, 1231, 1232, 1239, 1241, 1242, 1248, 1254, 1257, 1259, 1260, 1261, 1262, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1284, 1285, 1286, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1305, 1306, 1307, 1311, 1314, 1315, 1317, 1318, 1319, 1321, 1324, 1325, 1327, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1339, 1341, 1342, 1343, 1344, 1345, 1346, 1349, 1351, 1352, 1354, 1356, 1357, 1358, 1359, 1360, 1361, 1365, 1366, 1370, 1371, 1372, 1373, 1375, 1377, 1379, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1403, 1404, 1406, 1407, 1408, 1411, 1412, 1413, 1414, 1416, 1418, 1424, 1426, 1427, 1428, 1429, 1430, 1431, 1433, 1434, 1435, 1437, 1439, 1440, 1442, 1443, 1446, 1450, 1451, 1452, 1453, 1454, 1455, 1456, 1461, 1462, 1465, 1466, 1467, 1469, 1470, 1476, 1477, 1478, 1479, 1480, 1481, 1482, 1484, 1485, 1486, 1488, 1489, 1493, 1494, 1495, 1496, 1497, 1498, 1499, 1502, 1504, 1506, 1508, 1509, 1511, 1512, 1513, 1514, 1515, 1516, 1517, 1520, 1522, 1523, 1525, 1527, 1528, 1529, 1532, 1533, 1534, 1535, 1536, 1537, 1539, 1541, 1542, 1544, 1545, 1546, 1548, 1551, 1552, 1553, 1555, 1558, 1559, 1560, 1561, 1562, 1564, 1565, 1566, 1567, 1569, 1570, 1571, 1573, 1574, 1575, 1578, 1581, 1582, 1583, 1584, 1586, 1587, 1588, 1589, 1590, 1591, 1593, 1596, 1597, 1598, 1599, 1600, 1601, 1603, 1606, 1608, 1609, 1610, 1611, 1612, 1613, 1617, 1618, 1621, 1622, 1623, 1624, 1626, 1627, 1628, 1630, 1631, 1632, 1633, 1636, 1637, 1638, 1639, 1641, 1643, 1650, 1651, 1654, 1655, 1657, 1658, 1661, 1662, 1663, 1664, 1665, 1666, 1667, 1668, 1670, 1671, 1672, 1673, 1675, 1676, 1677, 1679, 1680, 1685, 1687, 1688, 1689, 1691, 1692, 1693, 1694, 1695, 1696, 1697, 1698, 1699, 1701, 1702, 1703, 1705, 1706, 1707, 1708, 1709, 1712, 1713, 1714, 1715, 1718, 1719, 1720, 1721, 1723, 1724, 1725, 1726, 1727, 1728, 1729, 1732, 1734, 1735, 1737, 1738, 1740, 1741, 1742, 1743, 1746, 1749, 1750, 1751, 1756, 1757, 1758, 1759, 1760, 1761, 1762, 1764, 1766, 1767, 1768, 1769, 1771, 1772, 1774, 1775, 1778, 1780, 1781, 1782, 1783, 1785, 1786, 1788, 1789, 1791, 1792, 1793, 1797, 1798, 1800, 1801, 1803, 1804, 1805, 1806, 1807, 1808, 1809, 1810, 1812, 1813, 1817, 1819, 1820, 1822, 1824, 1825, 1826, 1827, 1828, 1829, 1830, 1834, 1838, 1839, 1840, 1841, 1842, 1844, 1846, 1847, 1848, 1849, 1853, 1854, 1855, 1856, 1857, 1858, 1859, 1860, 1861, 1865, 1866, 1867, 1869, 1870, 1871, 1872, 1873, 1876, 1878, 1881, 1883, 1884, 1886, 1887, 1895, 1897, 1898, 1899, 1900, 1903, 1904, 1907, 1909, 1911, 1913, 1917, 1918, 1919, 1920, 1922, 1923, 1924, 1925, 1927, 1928, 1929, 1930, 1931, 1932, 1933, 1934, 1935, 1938, 1941, 1942, 1943, 1945, 1948, 1949, 1953, 1955, 1957, 1958, 1959, 1960, 1961, 1962, 1965, 1966, 1967, 1970, 1971, 1972, 1973, 1974, 1975, 1979, 1982, 1986, 1988, 1991, 1992, 1993, 1994, 2000, 2001, 2003, 2005, 2007, 2008, 2010, 2011, 2012, 2013, 2015, 2017, 2018, 2019, 2020, 2021, 2024, 2025, 2027, 2028, 2030, 2031, 2032, 2036, 2037, 2038, 2042, 2044, 2046, 2047, 2048, 2050, 2051, 2054, 2055, 2056, 2057, 2059, 2062, 2063, 2064, 2065, 2066, 2067, 2068, 2073, 2074, 2075, 2078, 2079, 2080, 2082, 2084, 2085, 2087, 2090, 2091, 2092, 2093, 2095, 2101, 2102, 2105, 2110, 2111, 2112, 2113, 2114, 2115, 2119, 2120, 2123, 2124, 2125, 2128, 2129, 2132, 2134, 2135, 2137, 2138, 2139, 2140, 2141, 2144, 2145, 2146, 2147, 2148, 2149, 2150, 2157, 2158, 2160, 2161, 2162, 2163, 2167, 2168, 2169, 2170, 2171, 2172, 2174, 2177, 2180, 2183, 2185, 2186, 2187, 2188, 2189, 2190, 2191, 2195, 2196, 2197, 2199, 2202, 2203, 2204, 2206, 2208, 2209, 2210, 2211, 2212, 2214, 2216, 2218, 2221, 2224, 2228, 2229, 2231, 2232, 2233, 2234, 2235, 2237, 2238, 2239, 2241, 2246, 2247, 2249, 2250, 2251, 2252, 2253, 2256, 2257, 2258, 2260, 2262, 2263, 2264, 2266, 2269, 2270, 2275, 2276, 2280, 2286, 2287, 2290, 2292, 2293, 2296, 2298, 2299, 2301, 2303, 2305, 2306, 2307, 2309, 2310, 2313, 2315, 2317, 2319, 2320, 2324, 2327, 2328, 2329, 2330, 2332, 2333, 2334, 2336, 2338, 2340, 2341, 2342, 2345, 2346, 2347, 2348, 2349, 2350, 2351, 2352, 2354, 2355, 2356, 2358, 2362, 2364, 2365, 2366, 2367, 2369, 2371, 2372, 2374, 2376, 2377, 2378, 2381, 2386, 2387, 2388, 2389, 2390, 2391, 2392, 2393, 2394, 2397, 2398, 2401, 2406, 2407, 2408, 2409, 2411, 2412, 2413, 2414, 2415, 2418, 2419, 2421, 2423, 2424, 2426, 2427, 2428, 2431, 2432, 2436, 2437, 2438, 2441, 2443, 2448, 2450, 2451, 2455, 2457, 2458, 2459, 2460, 2461, 2462, 2463, 2464, 2465, 2466, 2467, 2468, 2470, 2472, 2473, 2475, 2478, 2479, 2483, 2484, 2485, 2486, 2487, 2488, 2489, 2490, 2491, 2492, 2493, 2494, 2495, 2498, 2499, 2500, 2501, 2502, 2503, 2505, 2507, 2508, 2510, 2511, 2512, 2513, 2516, 2517, 2518, 2519, 2520, 2522, 2523, 2525, 2526, 2527, 2528, 2529, 2530, 2531, 2532, 2533, 2536, 2537, 2538, 2539, 2541, 2544, 2545, 2548, 2553, 2555, 2558, 2560, 2561, 2562, 2563, 2566, 2567, 2568, 2569, 2571, 2572, 2574, 2575, 2576, 2577, 2578, 2580, 2581, 2582, 2585, 2588, 2589, 2590, 2591, 2592, 2593, 2598, 2599, 2600, 2601, 2602, 2603, 2605, 2608, 2610, 2612, 2613, 2615, 2616, 2620, 2621, 2622, 2623, 2624, 2625, 2626, 2628, 2629, 2631, 2632, 2633, 2635, 2638, 2639, 2642, 2644, 2645, 2646, 2650, 2651, 2652, 2653, 2655, 2656, 2659, 2660, 2663, 2664, 2665, 2666, 2667, 2668, 2670, 2671, 2673, 2674, 2675, 2677, 2678, 2679, 2680, 2681, 2683, 2685, 2686, 2688, 2689, 2690, 2691, 2692, 2693, 2697, 2698, 2699, 2700, 2701, 2702, 2703, 2705, 2708, 2710, 2713, 2714, 2717, 2719, 2721, 2722, 2724, 2725, 2726, 2727, 2728, 2729, 2730, 2731, 2734, 2736, 2737, 2739, 2740, 2741, 2743, 2744, 2748, 2751, 2752, 2754, 2760, 2762, 2764, 2765, 2767, 2769, 2770, 2771, 2776, 2779, 2780, 2781, 2782, 2783, 2784, 2785, 2786, 2787, 2792, 2794, 2795, 2796, 2797, 2801, 2802, 2803, 2804, 2807, 2809, 2810, 2811, 2813, 2815, 2819, 2820, 2824, 2825, 2827, 2829, 2830, 2832, 2833, 2836, 2838, 2839, 2840, 2845, 2847, 2849, 2853, 2854, 2856, 2857, 2858, 2859, 2860, 2861, 2863, 2865, 2866, 2868, 2871, 2873, 2874, 2876, 2878, 2880, 2881, 2883, 2889, 2890, 2895, 2900, 2904, 2905, 2906, 2908, 2910, 2914, 2915, 2916, 2917, 2919, 2920, 2922, 2923, 2924, 2928, 2929, 2931, 2932, 2938, 2939, 2940, 2941, 2944, 2945, 2947, 2949, 2950, 2951, 2952, 2953, 2954, 2955, 2956, 2958, 2964, 2966, 2967, 2971, 2972, 2975, 2980, 2981, 2984, 2987, 2990, 2991, 2993, 2996, 2998, 2999, 3000, 3004, 3005, 3008, 3011, 3013, 3016, 3019, 3020, 3022, 3023, 3024, 3025, 3028, 3031, 3032, 3033, 3034, 3035, 3037, 3038, 3040, 3042, 3043, 3044, 3045, 3047, 3048, 3049, 3050, 3051, 3052, 3056, 3057, 3060, 3061, 3062, 3063, 3064, 3065, 3067, 3068, 3069, 3070, 3071, 3072, 3073, 3074, 3076, 3078, 3079, 3080, 3082, 3083, 3086, 3087, 3088, 3089, 3090, 3091, 3092, 3093, 3094, 3095, 3096, 3098, 3099, 3100, 3102, 3106, 3107, 3109, 3111, 3112, 3114, 3115, 3116, 3117, 3118, 3122, 3123, 3125, 3126, 3127, 3129, 3131, 3132, 3133, 3134, 3136, 3137, 3138, 3139, 3140, 3142, 3143, 3144, 3146, 3147, 3149, 3153, 3154, 3156, 3157, 3158, 3161, 3164, 3165, 3168, 3169, 3174, 3176, 3178, 3179, 3180, 3181, 3182, 3183, 3185, 3186, 3187, 3188, 3190, 3191, 3192, 3193, 3196, 3198, 3200, 3202, 3205, 3206, 3207, 3209, 3211, 3215, 3217, 3218, 3220, 3222, 3223, 3224, 3225, 3228, 3230, 3232, 3234, 3236, 3237, 3238, 3239, 3240, 3241, 3243, 3245, 3247, 3249, 3250, 3254, 3255, 3257, 3258, 3261, 3262, 3263, 3264, 3266, 3267, 3270, 3271, 3272, 3274, 3276, 3277, 3278, 3279, 3281, 3282, 3284, 3285, 3288, 3292, 3293, 3294, 3296, 3299, 3300, 3301, 3302, 3303, 3304, 3306, 3307, 3308, 3310, 3312, 3316, 3320, 3322, 3323, 3324, 3325, 3326, 3328, 3329, 3332, 3334, 3336, 3337, 3338, 3339, 3340, 3342, 3343, 3345, 3347, 3354, 3355, 3357, 3358, 3359, 3360, 3361, 3362, 3363, 3365, 3366, 3367, 3369, 3371, 3372, 3374, 3376, 3377, 3378, 3379, 3380, 3383, 3385, 3387, 3393, 3394, 3396, 3399, 3400, 3402, 3403, 3406, 3408, 3409, 3410, 3416, 3417, 3419, 3425, 3427, 3428, 3429, 3432, 3433, 3435, 3436, 3438, 3443, 3445, 3446, 3447, 3448, 3449, 3451, 3452, 3453, 3454, 3455, 3459, 3463, 3464, 3466, 3467, 3469, 3470, 3473, 3475, 3477, 3478, 3480, 3482, 3483, 3484, 3486, 3487, 3488, 3489, 3490, 3491, 3492, 3493, 3495, 3496, 3497, 3499, 3500, 3503, 3504, 3505, 3508, 3512, 3513, 3514, 3516, 3517, 3518, 3520, 3521, 3522, 3523, 3525, 3527, 3528, 3529, 3530, 3532, 3536, 3541, 3542, 3547, 3548, 3550, 3551, 3552, 3553, 3555, 3556, 3562, 3565, 3567, 3569, 3570, 3574, 3575, 3577, 3578, 3579, 3580, 3581, 3584, 3586, 3588, 3591, 3593, 3594, 3596, 3597, 3598, 3600, 3601, 3602, 3603, 3605, 3606, 3607, 3610, 3611, 3612, 3614, 3615, 3616, 3618, 3621, 3624, 3626, 3627, 3628, 3629, 3630, 3632, 3633, 3635, 3636, 3637, 3638, 3639, 3641, 3643, 3644, 3646, 3647, 3649, 3651, 3652, 3654, 3655, 3656, 3657, 3659, 3660, 3661, 3662, 3664, 3665, 3666, 3669, 3671, 3672, 3674, 3675, 3676, 3678, 3679, 3681, 3682, 3684, 3687, 3688, 3689, 3692, 3693, 3694, 3696, 3699, 3700, 3704, 3705, 3706, 3709, 3710, 3713, 3715, 3716, 3718, 3719, 3720, 3721, 3724, 3725, 3726, 3727, 3728, 3729, 3730, 3733, 3734, 3736, 3737, 3738, 3742, 3744, 3745, 3746, 3747, 3748, 3750, 3752, 3753, 3754, 3755, 3756, 3759, 3760, 3765, 3766, 3768, 3769, 3770, 3771, 3775, 3776, 3778, 3780, 3781, 3783, 3784, 3785, 3786, 3787, 3788, 3792, 3794, 3796, 3799, 3802, 3803, 3804, 3805, 3806, 3807, 3808, 3810, 3811, 3812, 3813, 3814, 3815, 3816, 3817, 3818, 3822, 3823, 3824, 3825, 3826, 3827, 3828, 3829, 3830, 3831, 3832, 3833, 3834, 3835, 3836, 3837, 3838, 3839, 3842, 3845, 3846, 3847, 3848, 3849, 3852, 3853, 3854, 3855, 3856, 3857, 3859, 3860, 3863, 3864, 3865, 3866, 3867, 3868, 3870, 3872, 3879, 3883, 3884, 3885, 3889, 3891, 3892, 3893, 3895, 3897, 3898, 3902, 3904, 3906, 3907, 3909, 3910, 3919, 3921, 3923, 3924, 3926, 3929, 3930, 3931, 3932, 3934, 3936, 3937, 3938, 3939, 3940, 3941, 3942, 3946, 3947, 3948]
	# manual_refined_dict=pickle.load(open( "manual_refined_dict.p" , 'rb'))	
	previous_486=[2, 3, 4, 6, 42, 50, 51, 54, 56, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 107, 115, 117, 119, 121, 124, 125, 126, 127, 128, 130, 138, 144, 146, 153, 156, 157, 170, 172, 175, 176, 184, 192, 195, 196, 201, 203, 211, 213, 217, 219, 222, 228, 229, 230, 232, 233, 236, 237, 238, 241, 244, 246, 247, 248, 249, 250, 251, 252, 253, 261, 265, 269, 274, 275, 276, 283, 285, 286, 287, 288, 289, 294, 295, 301, 302, 303, 305, 311, 317, 320, 331, 336, 353, 355, 368, 423, 445, 514, 528, 532, 539, 573, 576, 597, 600, 601, 604, 614, 615, 625, 630, 638, 639, 641, 644, 654, 655, 656, 658, 664, 665, 674, 675, 676, 680, 681, 682, 684, 686, 687, 688, 689, 692, 694, 696, 701, 704, 707, 712, 713, 714, 717, 719, 720, 722, 723, 729, 731, 734, 737, 738, 742, 743, 746, 747, 748, 749, 751, 752, 753, 756, 759, 761, 764, 765, 766, 767, 768, 769, 772, 773, 777, 779, 780, 784, 785, 787, 791, 792, 793, 817, 818, 821, 823, 825, 826, 827, 828, 832, 833, 834, 836, 839, 842, 843, 846, 849, 850, 851, 862, 863, 867, 868, 874, 875, 877, 879, 880, 882, 885, 886, 887, 888, 909, 915, 916, 917, 918, 920, 922, 926, 927, 930, 937, 938, 939, 940, 945, 946, 947, 950, 961, 964, 965, 969, 970, 971, 973, 977, 978, 981, 985, 987, 988, 989, 990, 991, 992, 999, 1002, 1004, 1009, 1010, 1012, 1016, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1028, 1029, 1030, 1032, 1035, 1038, 1046, 1061, 1072, 1075, 1087, 1097, 1100, 1103, 1123, 1137, 1151, 1152, 1171, 1179, 1180, 1187, 1189, 1194, 1218, 1220, 1225, 1239, 1248, 1254, 1259, 1267, 1268, 1293, 1295, 1305, 1306, 1317, 1318, 1321, 1324, 1334, 1335, 1336, 1339, 1351, 1358, 1361, 1372, 1377, 1390, 1393, 1397, 1416, 1426, 1428, 1443, 1478, 1479, 1482, 1484, 1494, 1508, 1522, 1528, 1536, 1537, 1539, 1551, 1555, 1558, 1559, 1564, 1565, 1569, 1600, 1601, 1627, 1633, 1636, 1657, 1672, 1673, 1680, 1693, 1712, 1746, 1761, 1767, 1769, 1774, 1775, 1781, 1791, 1808, 1809, 1856, 1859, 1873, 1876, 1881, 1883, 1887, 1913, 1953, 1958, 1960, 2008, 2027, 2028, 2032, 2055, 2141, 2158, 2174, 2218, 2224, 2239, 2257, 2276, 2293, 2307, 2309, 2334, 2338, 2341, 2345, 2354, 2356, 2358, 2372, 2397, 2427, 2468, 2484, 2492, 2529, 2536, 2537, 2538, 2544, 2558, 2566, 2567, 2635, 2646, 2688, 2693, 2699, 2700, 2705, 2728, 2736, 2769, 2810, 2815, 2819, 2825, 2827, 2829, 2840, 2849, 2868, 2871, 2873, 2876, 2881, 3031, 3040, 3060, 3088, 3102, 3111, 3127, 3153, 3165, 3187, 3200, 3205, 3207, 3257, 3323, 3347, 3354, 3357, 3361, 3362, 3376, 3399, 3433, 3463, 3464, 3467, 3469, 3475, 3477, 3497, 3499, 3518, 3520, 3552, 3553, 3565, 3605, 3632, 3674, 3693, 3696, 3704, 3710, 3713, 3719, 3734, 3738, 3788, 3823, 3824, 3830, 3833, 3834, 3842, 3889]
	# final_dataset=pickle.load(open( "final_dataset.p" , 'rb'))
	pass

def get_input_sentences_sisu():
	cur_file=open('done_ambi_sisu.txt','r')
	line_data=cur_file.readlines()
	cur_file_index=None
	cur_node_index=None
	node_dict={}
	edge_list=[]
	refined_dict={}
	for cur_line in line_data:
		if ("sentence:" in cur_line):
			# new sentence
			cur_file_index=int(cur_line.split(":")[1])
			cur_node_index=0
			node_dict={}
			edge_list=[]
			pass
		elif (": [" in cur_line):
			# new word
			print line_data.index(cur_line)
			print cur_line
			node_data=eval(cur_line.split(":")[1])
			node_dict[cur_node_index]=node_data
			cur_node_index+=1
			pass
		elif ("==" in cur_line):
			refined_dict[cur_file_index]=node_dict
			if len(node_dict.keys())!=(cur_node_index):
				print "fatal error "
				exit()
				pass
			cur_node_index=None
			pass
		pass
	print len(refined_dict.keys())
	return refined_dict
	pass

def get_word_dict_sisu(node_dict):
	key_list=node_dict.keys()
	# print key_list
	temp_list=[]
	for cur_node_index in key_list:
		temp_list.append(node_dict[cur_node_index][3])
		pass
	temp_list=list(set(temp_list))
	temp_list.sort()
	# print temp_list
	word_dict={}
	for cur_node_index in key_list:
		word_dict[node_dict[cur_node_index][3]]=node_dict[cur_node_index][0]
		pass
	# print word_dict
	return word_dict
	pass

def food_for_crawler():
	# svg_gold_dict=pickle.load(open( "svg_gold_dict.p" , 'rb'))
	svg_gold_dict=pickle.load(open( "manual_refined_dict.p" , 'rb'))
	file_list=svg_gold_dict.keys()
	file_list.sort()
	for cur_sent_id in file_list:
		node_dict=svg_gold_dict[cur_sent_id][0]
		# print "sentence : "+str(cur_sent_id)
		manual_string=""
		key_list=node_dict.keys()
		key_list.sort()
		for cur_key in key_list:
			cur_word=node_dict[cur_key][0]
			cur_word=cur_word.replace(" ", "")
			# handle "-"
			if "-" in cur_word:
				cur_word=cur_word.split("-")[-1]
				pass
			manual_string=manual_string+cur_word+" "
		print str(cur_sent_id)+":"+manual_string
	sisu_gold_dict=pickle.load(open( "sisu_gold_dict.p" , 'rb'))	
	refined_dict=pickle.load(open( "archive/manual_ambi/done_ambi_sisu.p" , 'rb'))	
	file_list=refined_dict.keys()
	file_list.sort()
	for cur_sent_id in file_list:
		node_dict=sisu_gold_dict[cur_sent_id][0]
		# print "sentence : "+str(cur_sent_id)
		manual_word_dict=get_word_dict_sisu(refined_dict[cur_sent_id])
		gold_string=""
		manual_string=""
		key_list=node_dict.keys()
		key_list.sort()
		for cur_key in key_list:
			cur_word=node_dict[cur_key][0]
			cur_word=cur_word.replace(" ", "")
			gold_string=gold_string+cur_word+" "
			if cur_key in manual_word_dict.keys():
				cur_word=manual_word_dict[cur_key]
				pass
			# handle "-"
			if "-" in cur_word:
				cur_word=cur_word.split("-")[-1]
				pass
			manual_string=manual_string+cur_word+" "
		gold_string=gold_string.strip()
		manual_string=manual_string.strip()
		temp_x=gold_string.split(" ")
		temp_y=manual_string.split(" ")
		# print temp_x
		# print temp_y
		if len(temp_x) != len(temp_y):
			print "fatal error !!!"
			exit()
			pass
		print str(cur_sent_id+4000)+":"+manual_string
		pass
	pass

def get_main_gold_dict():
	svg_gold_dict=pickle.load(open( "svg_gold_dict.p" , 'rb'))
	manual_refined_dict=pickle.load(open( "manual_refined_dict.p" , 'rb'))
	sisu_gold_dict=pickle.load(open( "sisu_gold_dict.p" , 'rb'))	
	main_gold_dict={}
	temp_list=[]
	file_list=svg_gold_dict.keys()
	file_list.sort()
	temp_list+=file_list
	for cur_sent_id in file_list:
		main_gold_dict[cur_sent_id]=cpy.deepcopy(svg_gold_dict[cur_sent_id])
		pass
	file_list=manual_refined_dict.keys()
	file_list.sort()
	temp_list+=file_list
	for cur_sent_id in file_list:
		main_gold_dict[cur_sent_id]=cpy.deepcopy(manual_refined_dict[cur_sent_id])
		pass
	file_list=sisu_gold_dict.keys()
	file_list.sort()
	for cur_sent_id in file_list:
		main_gold_dict[cur_sent_id+4000]=cpy.deepcopy(sisu_gold_dict[cur_sent_id])
		temp_list.append(cur_sent_id+4000)
		pass
	print len(main_gold_dict.keys())
	file_list= main_gold_dict.keys()
	file_list.sort()
	temp_list.sort()
	print file_list==(temp_list)
	pickle.dump(main_gold_dict,open('main_gold_dict.p' , 'w'))
	pass

def main_dict_underscore():
	file_list=[538,1098,1107,1112,1480,1584,1591,1764,2125,3019,3811,4031,4152]
	main_gold_dict=pickle.load(open( "main_gold_dict.p" , 'rb'))
	main_gold_dict[538][0][10][0]="anayA"
	main_gold_dict[538][0][11][0]="jihvayA"
	for cur_sent_id in file_list:
		node_dict=main_gold_dict[cur_sent_id][0]
		for cur_key in node_dict.keys():
			if "_" in node_dict[cur_key][0]:
				cur_str= node_dict[cur_key][0]
				if (cur_str == 'mama_AhvAnam') :
					main_gold_dict[cur_sent_id][0][cur_key][0]='AhvAnam'
					pass
				if (cur_str == 'sTitA_asi') :
					main_gold_dict[cur_sent_id][0][cur_key][0]='asi'
					pass
				if (cur_str == 'avajYApekzayA_aDikena') :
					main_gold_dict[cur_sent_id][0][cur_key][0]='avajYApekzayA'
					pass
				if (cur_str == 'pitA_asti') :
					main_gold_dict[cur_sent_id][0][cur_key][0]='pitA'
					pass
				if (cur_str == 'kA_anukUlam') :
					main_gold_dict[cur_sent_id][0][cur_key][0]='kA'
					pass
				if (cur_str == 'dvitIyA_vfdDA') :
					main_gold_dict[cur_sent_id][0][cur_key][0]='vfdDA'
					pass
				if (cur_str == 'anena_AdAnam') :
					main_gold_dict[cur_sent_id][0][cur_key][0]='anena'
					pass
				if (cur_str == 'cOrasya_Akftim') :
					main_gold_dict[cur_sent_id][0][cur_key][0]='Akftim'
					pass
				if (cur_str == 'buBukzA_api') :
					main_gold_dict[cur_sent_id][0][cur_key][0]='buBukzA'
					pass
				if (cur_str == 'nigfhya_ekasmin') :
					main_gold_dict[cur_sent_id][0][cur_key][0]='nigfhya'
					pass
				if (cur_str == 'aparA_eva') :
					main_gold_dict[cur_sent_id][0][cur_key][0]='aparA'
					pass
				if (cur_str == 'BAjA_rucA') :
					main_gold_dict[cur_sent_id][0][cur_key][0]='BAjA'
					pass
				pass
			pass
		pass
	for cur_sent_id in file_list:
		node_dict=main_gold_dict[cur_sent_id][0]
		for cur_key in node_dict.keys():
			if "_" in node_dict[cur_key][0]:
				print node_dict[cur_key][0]
				pass
			pass
		pass
	print main_gold_dict[538][0]
	pickle.dump(main_gold_dict,open('main_gold_dict.p' , 'w'))
	pass

def update_gold_lemmas():
	main_gold_dict=pickle.load(open( "main_gold_dict.p" , 'rb'))
	look_for_cng_patterns_dict=pickle.load(open( "look_for_cng_patterns_dict.p" , 'rb'))
	key_list=look_for_cng_patterns_dict.keys()
	key_list.sort()
	for cur_sent_id in key_list:
		lemma_new_lemma_list=look_for_cng_patterns_dict[cur_sent_id][4]
		node_dict=main_gold_dict[cur_sent_id][0]
		key_list=node_dict.keys()
		key_list.sort()
		for cur_key in key_list:
			for cur_pair in lemma_new_lemma_list:
				if (node_dict[cur_key][1]==cur_pair[0]):
					node_dict[cur_key][1]=cur_pair[1]
					pass
				pass
			pass
		main_gold_dict[cur_sent_id][0]=cpy.deepcopy(node_dict)
		pass
	file_list=main_gold_dict.keys()
	file_list.sort()
	for cur_file_index in file_list:
		print "sentence : "+str(cur_file_index)
		node_dict=main_gold_dict[cur_file_index][0]
		key_list=node_dict.keys()
		key_list.sort()
		for cur_key in key_list:
			cur_node=node_dict[cur_key]
			print cur_node[0]
			print cur_node[1]
			pass
		pass
	pickle.dump(main_gold_dict,open('main_gold_dict.p' , 'w'))
	pass

def local_is_nan(row_pre_verb):
	try:
		temp_x=np.isnan(row_pre_verb)
		return temp_x
		pass
	except Exception, e:
		return False
		pass
	pass

def fill_up_problem_words():
	# check problem words
	main_gold_dict=pickle.load(open( "main_gold_dict.p" , 'rb'))
	file_list=main_gold_dict.keys()
	file_list.sort()
	# file_list=[245, 273, 335]
	# [4186, 1, 2, 'mUlA_uttarIyabanDA']
	main_dataframe_dict=pickle.load(open( "main_dataframe_dict.p" , 'rb'))
	# underscore_problems=[19, 22, 40, 66, 84, 92, 120, 138, 144, 145, 154, 179, 181, 201, 215, 242, 299, 309, 341, 351, 354, 423, 430, 468, 475, 589, 614, 705, 853, 986, 1008, 1019, 1061, 1094, 1098, 1123, 1248, 1332, 1378, 1435, 1483, 1490, 1491, 1515, 1544, 1546, 1548, 1562, 1591, 1606, 1655, 1691, 1726, 1740, 1742, 1781, 1790, 1803, 1804, 1918, 1920, 1931, 1945, 1982, 1986, 1988, 2009, 2011, 2013, 2019, 2037, 2056, 2078, 2111, 2114, 2115, 2161, 2232, 2237, 2260, 2276, 2299, 2324, 2330, 2345, 2360, 2377, 2379, 2392, 2421, 2432, 2452, 2483, 2489, 2495, 2508, 2539, 2555, 2583, 2593, 2598, 2605, 2623, 2636, 2639, 2644, 2645, 2669, 2685, 2717, 2748, 2752, 2821, 2863, 2872, 2877, 2900, 2904, 2906, 2929, 2940, 3013, 3034, 3045, 3063, 3069, 3071, 3078, 3080, 3086, 3102, 3112, 3122, 3125, 3139, 3158, 3218, 3223, 3250, 3285, 3312, 3325, 3332, 3387, 3393, 3433, 3451, 3467, 3493, 3495, 3496, 3497, 3503, 3508, 3517, 3542, 3551, 3563, 3567, 3577, 3578, 3580, 3584, 3602, 3616, 3618, 3633, 3656, 3657, 3694, 3740, 3745, 3747, 3750, 3753, 3760, 3763, 3771, 3803, 3814, 3815, 3817, 3838, 3852, 3884, 3909, 3919, 4001, 4002, 4010, 4023, 4030, 4031, 4046, 4053, 4056, 4060, 4066, 4069, 4071, 4072, 4074, 4092, 4100, 4101, 4102, 4113, 4135, 4167, 4171, 4177, 4182, 4185, 4186, 4197, 4199, 4201, 4209, 4215, 4222, 4229, 4230, 4235, 4239, 4252, 4263, 4264, 4270, 4279, 4284, 4286, 4290, 4301, 4305, 4318, 4321, 4323, 4325, 4329, 4344, 4351, 4360, 4370, 4386, 4388, 4389, 4398, 4399, 4400, 4401, 4413, 4419, 4431, 4432, 4447, 4449, 4451, 4455, 4469, 4471, 4473, 4475, 4485, 4491, 4492, 4498, 4503, 4506, 4509, 4510, 4512, 4519, 4526, 4536, 4543, 4546, 4552, 4558, 4560, 4561, 4568, 4603, 4605, 4607, 4615, 4625, 4632, 4641, 4652, 4653, 4655, 4656, 4660, 4683, 4684, 4695]
	underscore_problems=[19, 20, 37, 110, 111, 279, 592, 626, 786, 967, 1031, 1347, 1418, 1489, 1529, 1667, 1670, 1842, 1848, 1855, 2065, 2067, 2129, 2177, 2274, 2555, 2725, 3008, 3288, 3556, 3664, 3688, 3689, 3706, 3728, 3730, 3808, 3948, 4053, 4127, 4144, 4154, 4218, 4239, 4252, 4256, 4258, 4295, 4329, 4448, 4449, 4539, 4592, 4670, 4691]
	file_list=underscore_problems
	rearrange_dict_under=pickle.load(open( "rearrange_dict_under.p" , 'rb'))
	for cur_file_index in file_list:
		print "sentence :"+str(cur_file_index)
		df = pd.read_csv("dataframes/sentence_dataframes/"+str(cur_file_index)+".csv",dtype={'id': np.int32, 'level': np.int32, 'color_class': 'str', 'position': np.int32, 'chunk_no': np.int32, 'word': 'object','lemma': 'object', 'pre_verb': 'object', 'morph': 'str', 'colspan': np.int32, 'wordlenth': np.int32, 'aux_inf': 'object','word_slp1': 'str', 'word_wx': 'str', 'sandhi_indexs': 'object', 'sandhi_words': 'object'})
		new_dataframe=pd.DataFrame(columns = ['id','level','color_class','position','chunk_no','word_rom','lemma','pre_verb','morph','colspan','wordlenth','aux_inf','word_slp1','sandhi_indexs','sandhi_words'])
		for cur_index, row in df.iterrows():
			print "row_cur_index :"+str(cur_index)
			row_id=row['id']
			row_level=row['level']
			row_color_class=row['color_class']
			row_position=row['position']
			row_chunk_no=row['chunk_no']
			row_word_rom=row['word']
			row_lemma=utf_to_ascii(row['lemma'])
			row_pre_verb=row['pre_verb']
			if not( local_is_nan(row_pre_verb)):
				row_pre_verb=utf_to_ascii(row_pre_verb)
				pass
			row_morph=row['morph']
			row_colspan=row['colspan']
			row_wordlenth=row['wordlenth']
			row_aux_inf=row['aux_inf']
			row_word_slp1=row['word_slp1']
			row_sandhi_indexs=row['sandhi_indexs']
			row_sandhi_words=row['sandhi_words']
			# 
			if ("_" in row_word_slp1):
				print [cur_file_index,row['id'], row['chunk_no'],row['word_slp1']]
				pass
			if cur_file_index in underscore_problems:
				row['chunk_no']=rearrange_dict_under[cur_file_index][row_chunk_no]
				row_chunk_no=rearrange_dict_under[cur_file_index][row_chunk_no]
				pass
			# 
			if row_morph=='?':
				print [cur_file_index,row['id'], row['chunk_no'],row['word_slp1']]
				cur_node=main_gold_dict[cur_file_index][0][row_chunk_no-1]
				print cur_node
				# if morph=="?" update lemma morph 
				row_lemma=cur_node[1]
				row_morph=cur_node[2]
				pass
			new_dataframe.loc[row['id']]=[row_id,row_level,row_color_class,row_position,row_chunk_no,row_word_rom,row_lemma,row_pre_verb,row_morph,row_colspan,row_wordlenth,row_aux_inf,row_word_slp1,row_sandhi_indexs,row_sandhi_words]
			pass
		# new_dataframe.to_csv(str(cur_file_index)+".csv" ,encoding = 'utf-8' , sep=',',index = False,mode = 'w' )
		main_dataframe_dict[cur_file_index]=new_dataframe
		pass
	pickle.dump(main_dataframe_dict,open('main_dataframe_dict.p' , 'w'))
	pass

def fun_do():
	problem_list=[[19, 17, 13, 'tadA_AgacCat'],[22, 2, 3, 'dfzwvA_ekA_nArI'],[40, 11, 9, 'cetasA_anvaBavam'],[66, 6, 5, 'ca_ASrame'],[66, 18, 13, 'rAmasya_ASramAt'],[84, 0, 1, 'sadA_eva'],[92, 0, 1, 'daSaraTasya_AjYayA_rAmaH'],[120, 8, 5, 'atra_Anayam'],[138, 4, 4, 'atra_eva'],[144, 1, 2, 'sadA_eva'],[144, 6, 6, 'dfzwvA_acintayat'],[145, 3, 3, 'sadA_eva'],[154, 15, 7, 'mArayitvA_aBakzayat'],[179, 2, 2, 'svarRasya_ABaraRam'],[181, 20, 8, 'kftvA_ABaraRam'],[201, 1, 2, 'taTA_akarot'],[215, 8, 6, 'kftvA_uccEH'],[242, 0, 1, 'nfpasya_AjYayA_dAsaH'],[245, 3, 4, 'kUrdizyante'],[273, 2, 3, 'kartitvA'],[299, 9, 4, 'vfTA_AyAsam'],[309, 0, 1, 'daSaraTasya_AjYayA_rAmaH'],[335, 2, 2, 'SiraskAni'],[338, 1, 2, 'SiraskAni'],[339, 6, 4, 'Siraskam'],[340, 5, 5, 'Siraskam'],[341, 3, 3, 'taTA_anvakurvan'],[342, 7, 2, 'SiraskAni'],[343, 11, 3, 'SiraskAni'],[354, 9, 4, 'paNkilA_Bavati'],[423, 2, 2, 'atra_Aryasya'],[430, 0, 1, 'aDunA_anyA_gatiH'],[468, 0, 1, 'atra_ezaH'],[475, 4, 5, 'ujjahitvA_AryaputraH'],[589, 6, 4, 'rAmeRa_AtmA'],[614, 3, 4, 'BrAtA_asti'],[617, 1, 2, 'Sirassu'],[640, 1, 2, 'klAntAH'],[691, 0, 1, 'dvezwFRAm'],[695, 0, 1, 'nfzu'],[705, 3, 3, 'jAmAtA_asti'],[706, 1, 2, 'dvezwFn'],[830, 2, 2, 'nizkAn'],[853, 4, 3, 'sadA_eva'],[871, 1, 2, 'karaBakaH'],[890, 0, 1, 'nizkAH'],[957, 1, 2, 'kirIn'],[976, 8, 3, 'nizkAn'],[986, 2, 2, 'vinA_ariH'],[996, 0, 1, 'palvaleByaH'],[998, 0, 1, 'nizkAn'],[1008, 1, 2, 'arGyeRa_fzim'],[1019, 0, 1, 'kareRa_Ahvayati'],[1061, 4, 4, 'sA_asti'],[1094, 11, 8, 'ca_Akfzwam'],[1098, 6, 3, 'AtmA_anumodate'],[1123, 2, 2, 'taTA_eva'],[1166, 2, 2, 'vivaSatAyAH'],[1173, 2, 2, 'vivaSatayA'],[1183, 1, 2, 'gopyam'],[1219, 6, 2, 'Bagavan'],[1248, 1, 2, 'ca_utTAya'],[1276, 7, 5, 'varzapurAtanI'],[1332, 6, 5, 'prakAreRa_AyAmi'],[1378, 5, 3, 'kadA_utpannA_na'],[1435, 2, 2, 'praSnasya_uttaram'],[1441, 2, 3, 'kzatavikzatam'],[1483, 10, 6, 'tadA_aham'],[1490, 0, 1, 'tadA_aham'],[1491, 2, 2, 'ca_AvayoH'],[1515, 0, 1, 'vikrayikasya_uttareRa'],[1544, 0, 1, 'tasya_eva'],[1546, 4, 3, 'apUrvA_apUrvA AnandAnuBUtiH'],[1548, 0, 1, 'tasya_eva'],[1556, 1, 2, 'vizaRRaH'],[1562, 4, 3, 'kftvA_ekA'],[1591, 6, 5, 'ca_AsIt'],[1606, 0, 1, 'leKasya_idam'],[1618, 21, 9, 'prakatam'],[1655, 8, 9, 'atra_AgamizyaH'],[1691, 3, 4, 'atra_AnItavAn'],[1726, 28, 8, 'ca_eva'],[1740, 7, 5, 'matvA_apamAnayataH'],[1742, 1, 2, 'taTA_upavizwam'],[1742, 15, 9, 'uktvA_anyaH'],[1742, 16, 11, 'ca_ASizwam'],[1742, 17, 13, 'uktvA_Akzipat'],[1781, 0, 1, 'tadA_aham'],[1783, 14, 9, 'nirsftah'],[1790, 1, 2, 'tasya_uttaram'],[1803, 4, 4, 'tasya_eva'],[1804, 7, 4, 'tilakasya_uttaram'],[1918, 7, 5, 'yaTA_Agatya'],[1920, 8, 6, 'kadA_api'],[1931, 6, 3, 'dasyudalasya_Agamanam'],[1945, 7, 5, 'dfzwvA_ekam'],[1948, 8, 5, 'dardra'],[1982, 20, 10, 'tava_eva'],[1986, 3, 3, 'tava_eva'],[1988, 1, 2, 'tasya_etayA'],[1989, 5, 4, 'tadIyaH'],[2009, 11, 4, 'taTA_eva'],[2011, 30, 19, 'tasya_eva'],[2013, 14, 10, 'mArayitvA_asya'],[2019, 0, 1, 'tava_imam'],[2037, 0, 1, 'sarvaTA_asahAyaH'],[2056, 3, 4, 'svasya_AvAse'],[2078, 1, 2, 'dfzwvA_ekaH'],[2094, 11, 7, 'kUrparam'],[2111, 10, 7, 'ca_eva'],[2114, 7, 2, 'taTA_eva_Asan'],[2115, 1, 2, 'taTA_eva_AsIt'],[2131, 1, 2, 'pipIlakaH'],[2150, 5, 4, 'samskArAH'],[2161, 16, 9, 'ca_upasTAtum'],[2165, 10, 7, 'melitum'],[2225, 1, 2, 'Sapitum'],[2232, 0, 1, 'tasya_Akrandanam'],[2237, 1, 2, 'vastrapawwikayA_AvezwitaH'],[2260, 0, 1, 'taTA_AgataH'],[2274, 15, 11, 'tumbikAm'],[2276, 2, 2, 'taTA_eva'],[2299, 0, 1, 'taTA_evam'],[2314, 10, 7, 'aNkitvA'],[2324, 2, 2, 'anusAreRa_ekaH'],[2330, 4, 2, 'taTA_eva'],[2345, 6, 4, 'sA_icCati'],[2360, 7, 5, 'ca_icCati'],[2370, 10, 8, 'BakzitaM'],[2377, 6, 3, 'kArayitvA_avaSyam'],[2379, 3, 4, 'taTA_eva'],[2380, 2, 2, 'coritam'],[2392, 0, 1, 'tasya_itastataH'],[2421, 1, 2, 'ca_ekasmAt'],[2432, 13, 7, 'budDvA_iti'],[2452, 0, 1, 'tadA_eva'],[2483, 7, 5, 'tasya_eva'],[2489, 1, 2, 'madIyasya_imam'],[2495, 0, 1, 'aDunA_anyaH'],[2508, 11, 9, 'sA_alakzitasTAne'],[2539, 0, 1, 'jYAtvA_etat'],[2555, 13, 4, 'mahASaktiSAlIrAjA_asit'],[2583, 4, 3, 'cetanA_nEva_AyAtA'],[2593, 25, 7, 'dattvA_avaSizwam'],[2593, 26, 9, 'ca_AtmajAya'],[2598, 14, 8, 'dattvA_etAH'],[2605, 0, 1, 'tadA_eva'],[2623, 0, 1, 'tasya_imam'],[2623, 24, 18, 'Agatya_upavizwaH'],[2636, 10, 4, 'kuruzva_iti'],[2639, 2, 2, 'vimAtA_api'],[2644, 3, 3, 'vyavahAreRa_indumatI'],[2645, 6, 5, 'BrAtA_ekaH'],[2669, 6, 4, 'SradDayA_arcitavAn'],[2685, 0, 1, 'SrAvakasya_imam'],[2717, 0, 1, 'atra_eva'],[2748, 8, 4, 'nEva_Apnoti'],[2752, 8, 4, 'vinA_eva'],[2821, 8, 5, 'DftvA_eva'],[2863, 23, 9, 'kaTayitvA_uccEH'],[2872, 3, 3, 'praSnasya_uttaram'],[2877, 3, 3, 'praSnasya_uttaram'],[2900, 1, 2, 'tasya_eva'],[2904, 8, 5, 'sarvaTA_ucCinnam'],[2906, 6, 5, 'atra_eva'],[2929, 11, 5, 'dasyudalasya_AgamanAt'],[2940, 0, 1, 'hA_hataH'],[2946, 12, 8, 'prAptaM'],[2985, 3, 3, 'vawukaH'],[2986, 4, 4, 'viSvakarmARaH'],[2995, 12, 5, 'pipIlakAH'],[3013, 22, 11, 'yaTA_aham'],[3034, 0, 1, 'tasya_AvAsAt'],[3045, 0, 1, 'tasya_uttamatAm'],[3063, 2, 2, 'taTA_eva'],[3069, 1, 2, 'atra_Agatasya'],[3071, 2, 3, 'atra_eva_ekAkinam'],[3078, 0, 1, 'atra_inDanasTitO'],[3080, 8, 4, 'tadA_aham'],[3086, 5, 3, 'aDunA_aham'],[3102, 1, 2, 'taTA_astu'],[3112, 1, 2, 'tasya_AdeSam'],[3122, 23, 7, 'ekasya_upari'],[3122, 25, 10, 'kftvA_ArUQAH'],[3125, 4, 4, 'yaTA_eva'],[3125, 15, 9, 'taTA_eva'],[3139, 6, 6, 'ca_Agamanaprayojanam'],[3158, 2, 2, 'tasya_idam'],[3173, 3, 3, 'samarTanam'],[3214, 0, 1, 'lipikaH'],[3218, 6, 4, 'atra_eva'],[3223, 10, 7, 'gfhasTasya_AvAsam'],[3233, 0, 1, 'tadIyAm'],[3250, 7, 5, 'Bojasya_eva'],[3285, 0, 1, 'sarvaTA_idam'],[3312, 1, 2, 'tadA_aham'],[3325, 0, 1, 'sA_api'],[3325, 3, 4, 'kfzRapakzasya_AsIt'],[3332, 1, 2, 'atra_eva'],[3333, 0, 1, 'vivaSO'],[3386, 4, 3, 'nawI'],[3387, 6, 4, 'aDunA_api'],[3393, 6, 4, 'mA_aDunA_iti'],[3433, 0, 1, 'vfTA_eva'],[3451, 2, 2, 'taTA_eva'],[3461, 8, 5, 'vilapanam'],[3467, 2, 3, 'atra_eva'],[3493, 1, 2, 'atra_eva'],[3495, 3, 4, 'tasya_evam'],[3496, 6, 6, 'atra_eva'],[3497, 0, 1, 'taTA_eva'],[3503, 4, 4, 'pitA_atra_eva'],[3508, 14, 9, 'kftvA_eva_AtmAnam'],[3517, 0, 1, 'tasya_imAm'],[3542, 0, 1, 'tadA_aham'],[3551, 1, 2, 'SrutvA_AnandASruBiH'],[3563, 17, 7, 'vinA_AhAram'],[3567, 5, 5, 'ca_ime'],[3577, 3, 4, 'tasya_icCAm'],[3578, 5, 3, 'tasya_AdeSam'],[3580, 12, 9, 'tadA_aham'],[3584, 0, 1, 'taTA_asmaByam'],[3602, 1, 2, 'taTA_eva'],[3616, 0, 1, 'sA_api'],[3618, 12, 6, 'leKayitvA_upayuktasTAne'],[3633, 1, 2, 'sadA_eva'],[3656, 0, 1, 'sA_api'],[3657, 1, 2, 'kaTAvAcakasya_idam'],[3691, 5, 4, 'prAvarttata'],[3694, 0, 1, 'tadA_eva'],[3717, 0, 1, 'Bagavan'],[3731, 0, 1, 'Bagavan'],[3740, 1, 2, 'yaTA_eva'],[3740, 13, 7, 'samBAlitavAn'],[3740, 14, 8, 'taTA_eva'],[3742, 9, 7, 'prArTitavAn'],[3745, 22, 8, 'yaTA_eva'],[3745, 24, 11, 'taTA_eva'],[3747, 5, 4, 'sadA_eva_ekA'],[3750, 6, 5, 'ca_AsIt'],[3753, 5, 5, 'sadA_eva'],[3760, 4, 4, 'tasya_AtmajaH'],[3763, 2, 3, 'sA_avaSyam'],[3771, 2, 3, 'sA_eva'],[3782, 2, 2, 'AyAntaH'],[3803, 0, 1, 'tasya_idam'],[3814, 4, 2, 'taTA_AsIt'],[3815, 4, 2, 'ca_AhUya'],[3817, 12, 8, 'kaTayitvA_AtmanA'],[3838, 1, 2, 'ca_evaMviDam'],[3852, 4, 4, 'sadA_eva'],[3884, 39, 21, 'tasya_ASramapadam'],[3909, 1, 2, 'ca_enam'],[3919, 9, 6, 'gatvA_AdityasanniBEH'],[3951, 10, 6, 'IyAt'],[4001, 6, 3, 'kOberadigBAgam'],[4001, 7, 4, 'apAsya_Agastyam'],[4002, 8, 6, 'BitvA_utTitam'],[4003, 16, 10, 'yugapat'],[4004, 21, 12, 'pracele'],[4005, 6, 5, 'vitAyamAnAm'],[4006, 6, 4, 'AdftAnAm'],[4009, 8, 4, 'AprapadInam'],[4009, 11, 6, 'aNguzWanizWyUtam'],[4010, 9, 5, 'SrfNgEH'],[4010, 13, 8, 'yasya_ucCrAyasOndaryaguRAH'],[4010, 14, 10, 'uddAmagirAm'],[4011, 0, 1, 'tejoniroDasamatA avahitena'],[4011, 7, 6, 'jaH'],[4012, 5, 4, 'sftya'],[4012, 11, 8, 'uccakEH'],[4013, 1, 2, 'jam'],[4017, 5, 4, 'visftvarEH'],[4018, 13, 7, 'ucCiKAni'],[4018, 21, 12, 'prApaRikAt'],[4019, 20, 11, 'tAMsuH'],[4019, 21, 12, 'pAMSuH'],[4019, 26, 15, 'atutTayat'],[4020, 9, 6, 'parAgiRIH'],[4022, 2, 3, 'AyAntyAm'],[4022, 21, 15, 'SradaDuH'],[4024, 14, 9, 'aDyavAtsuH'],[4026, 9, 7, 'anuyAntIm'],[4028, 7, 6, 'prAduzyAt'],[4030, 1, 2, 'sA_aSeze'],[4031, 3, 2, 'tasya_Anandita aSezajanA'],[4033, 5, 2, 'avacUqam'],[4034, 7, 5, 'stanI'],[4035, 9, 6, 'tamAm'],[4035, 26, 16, 'nyaDita'],[4036, 0, 1, 'tamena'],[4042, 13, 10, 'jagfhire'],[4044, 7, 4, 'varDizRum'],[4045, 20, 10, 'atikraSIyAn'],[4046, 8, 5, 'parigfhya_Akulena_udbAhunA'],[4047, 4, 3, 'gaRaSaH'],[4047, 16, 10, 'ajagaRan'],[4049, 16, 10, 'nirAsire'],[4049, 24, 14, 'sApantyam'],[4050, 8, 6, 'cCidaH'],[4053, 12, 7, 'na_Askandan'],[4056, 9, 2, 'tasya_ekabAhuH'],[4056, 24, 9, 'reje'],[4057, 6, 4, 'sOvidallAH'],[4058, 2, 2, 'rurudizA'],[4059, 24, 12, 'nipIqya'],[4060, 34, 15, 'kftvA_antaH'],[4064, 9, 6, 'tawIH'],[4065, 15, 7, 'AliNganAni'],[4066, 0, 1, 'priyatayA_aGaSaNkiBiH'],[4069, 19, 13, 'satA_nAmnA_api'],[4069, 20, 16, 'tasya_eva'],[4070, 3, 2, 'uccakEH'],[4070, 10, 6, 'SrfNgam'],[4070, 16, 11, 'udvIkzya'],[4071, 5, 3, 'kabarAm'],[4071, 8, 5, 'kabarIm'],[4071, 9, 6, 'dfzwvA_eva'],[4072, 5, 4, 'maham'],[4072, 10, 9, 'banDutayA_uditEH'],[4072, 22, 15, 'niSamayya'],[4073, 12, 6, 'praRodam'],[4074, 17, 10, 'DunvAnA_UrUH'],[4076, 18, 9, 'SrfNgam'],[4078, 33, 14, 'visoQum'],[4079, 38, 18, 'sambADam'],[4080, 10, 7, 'sprazwum'],[4081, 16, 6, 'biBarAmbaBUve'],[4082, 14, 9, 'draQIyaH'],[4085, 10, 7, 'ujjage'],[4086, 3, 3, 'Kedi'],[4087, 8, 4, 'avagAQum'],[4087, 28, 15, 'ASliSyat'],[4088, 15, 5, 'niDvAnam'],[4090, 5, 5, 'ucCrAyiBiH'],[4090, 8, 7, 'viracanEH'],[4090, 15, 11, 'vyarucan'],[4091, 17, 6, 'uccakEH'],[4092, 9, 5, 'vAsasA_apareRa'],[4093, 33, 13, 'mOgDyAt'],[4094, 7, 5, 'ASlezi'],[4096, 3, 3, 'sannizaRRAH'],[4100, 0, 1, 'nataBruvA_AnABeH'],[4100, 15, 10, 'ucCrAyi'],[4101, 3, 3, 'DAmA_medinIzu'],[4101, 17, 12, 'vivakzin'],[4101, 19, 14, 'dadfSe'],[4102, 0, 1, 'atra_OGAH'],[4103, 6, 2, 'vizaktam'],[4103, 7, 3, 'kUrpAsakam'],[4103, 14, 6, 'mUlA'],[4104, 8, 3, 'dalO'],[4108, 4, 5, 'kArttasvarAH'],[4109, 0, 1, 'vipaRinaH'],[4111, 14, 8, 'SuSruvire'],[4113, 3, 3, 'vinA_api'],[4115, 11, 9, 'DartrA'],[4115, 15, 12, 'prasasre'],[4117, 18, 8, 'uddrutam'],[4119, 20, 12, 'akzoBi'],[4123, 3, 3, 'aparatra'],[4123, 23, 9, 'vEdagDIm'],[4124, 8, 4, 'uccakEH'],[4126, 11, 6, 'viGawwanena'],[4127, 14, 10, 'anvabanDi'],[4129, 5, 3, 'AloqitAH'],[4129, 6, 4, 'SitikaRWapicCakzodadyutaH'],[4129, 12, 7, 'raToGEH'],[4131, 18, 5, 'muzaH'],[4132, 8, 6, 'alABi'],[4132, 19, 11, 'agrataHsTAH'],[4135, 16, 7, 'ca_itastataH'],[4137, 3, 2, 'sasnuH'],[4137, 10, 6, 'anenijuH'],[4137, 26, 13, 'gAnAm'],[4140, 11, 7, 'samreje'],[4143, 0, 1, 'udDatim'],[4144, 16, 9, 'mArgaruDaH'],[4144, 19, 12, 'ullaNaGya'],[4145, 1, 2, 'jaraWAH'],[4145, 11, 7, 'rUpAH'],[4145, 19, 9, 'tawIH'],[4146, 4, 4, 'gfhItarayARi'],[4147, 13, 10, 'abanDuram'],[4148, 3, 3, 'udDatim'],[4150, 16, 11, 'vivvokEH'],[4151, 16, 7, 'aBitaHpAtukasidDasinDoH'],[4153, 30, 7, 'samutTam'],[4154, 4, 3, 'jam'],[4154, 19, 10, 'AvavO'],[4159, 7, 6, 'sOvarRe'],[4159, 13, 11, 'AlIm'],[4162, 4, 4, 'SaNKakam'],[4162, 5, 5, 'DuvatyAH'],[4163, 2, 2, 'SrfNgARi'],[4163, 8, 5, 'kOsumBam'],[4163, 14, 7, 'mArdvIkam'],[4164, 24, 5, 'sOmeravIm'],[4164, 33, 10, 'vat'],[4165, 43, 14, 'sarasIH'],[4165, 44, 15, 'vigAQum'],[4167, 3, 4, 'vaDvA_dayam'],[4167, 11, 9, 'mamle'],[4168, 0, 1, 'aMSukAH'],[4168, 10, 5, 'darSinAm'],[4171, 12, 9, 'vartma_upeyuzaH'],[4175, 15, 11, 'tawaroDi'],[4176, 12, 10, 'glahAm'],[4176, 13, 11, 'vyAtyukzIm'],[4177, 0, 1, 'atra_uzitAH'],[4177, 19, 14, 'pragIyate'],[4179, 10, 2, 'praviralEH'],[4182, 9, 6, 'yA_anirvidA_viDAtrA'],[4184, 17, 10, 'pariRinaMsuH'],[4184, 21, 13, 'ziNgEH'],[4185, 11, 4, 'viGawwanayA_divaH'],[4185, 15, 7, 'SiKam'],[4186, 0, 1, 'uttarIyabanDA_mUlA_asTita'],[4187, 6, 4, 'unnamayya'],[4189, 13, 8, 'vratatyaH'],[4190, 0, 1, 'pAnAm'],[4196, 7, 4, 'gaRqUzam'],[4196, 15, 9, 'nipete'],[4197, 6, 4, 'jaH'],[4197, 7, 5, 'paripARqimA_Adade'],[4199, 10, 5, 'dayitatamena_udakena'],[4199, 33, 15, 'snapitam'],[4201, 17, 11, 'SrutvA_api'],[4202, 23, 12, 'yad'],[4202, 24, 13, 'mimaNkzoH'],[4202, 25, 14, 'dantinaH'],[4205, 12, 6, 'udvIkzya'],[4207, 16, 8, 'pakzatiH'],[4208, 1, 2, 'muKAH'],[4209, 1, 2, 'aDIratayA_vyavaDim'],[4210, 26, 16, 'kAluzyam'],[4211, 3, 3, 'bimbozWam'],[4215, 3, 3, 'saMsarpiBiH'],[4215, 5, 5, 'nizaNgiRA_rajasA'],[4215, 6, 7, 'ca_upaBogam'],[4216, 0, 1, 'payodanaBasvati'],[4216, 14, 11, 'uccakEH'],[4217, 7, 4, 'pulakini'],[4218, 20, 13, 'asAhi'],[4220, 16, 9, 'vitizWamAnam'],[4221, 28, 13, 'pyaDuH'],[4222, 0, 1, 'vyatizaNgiRi'],[4222, 8, 4, 'malinimA_yozitAm'],[4223, 15, 6, 'latikAH'],[4229, 13, 9, 'AtmanA_eva'],[4229, 22, 16, 'mAlA_abanDi'],[4230, 16, 9, 'vipruzaH'],[4230, 18, 11, 'gfhItvA_AsannAm'],[4233, 0, 1, 'danti'],[4233, 10, 7, 'aparivraQimAnam'],[4233, 11, 8, 'AgAt'],[4233, 15, 11, 'AkrAntitaH'],[4234, 7, 5, 'nilAyitAm'],[4235, 14, 10, 'aBidaDAH'],[4235, 15, 11, 'maDusuraBimuKAbjaganDalabDeH'],[4235, 23, 15, 'mA_nipAti'],[4237, 10, 5, 'icCatIBiH'],[4237, 25, 13, 'adDA'],[4239, 0, 1, 'yantrA_AkalanAya'],[4240, 0, 1, 'kIrtanaH'],[4243, 8, 5, 'vinihnutAH'],[4243, 9, 6, 'sPAwikaseDapaNktIH'],[4245, 9, 6, 'mamle'],[4246, 22, 10, 'adidravat'],[4246, 25, 12, 'nEdram'],[4248, 21, 13, 'kAlimnA'],[4250, 12, 6, 'praRAlyaH'],[4252, 10, 8, 'ADoraREH'],[4252, 17, 12, 'tarasA_AtmanA_eva'],[4254, 11, 5, 'unnamayya'],[4254, 13, 7, 'acumbi'],[4255, 7, 5, 'sUtraH'],[4256, 15, 9, 'biqAlekzaRaBIzaRAByaH'],[4258, 3, 2, 'sfjaH'],[4260, 11, 9, 'tad'],[4263, 3, 3, 'atiSlakzRatayA_AleKyam'],[4264, 0, 1, 'iha_indoH'],[4264, 19, 14, 'kila_iti'],[4267, 23, 12, 'AliliNga'],[4268, 23, 10, 'apatrapizRoH'],[4268, 26, 12, 'abjinI'],[4270, 20, 10, 'patriRAm'],[4270, 24, 13, 'vatsalatayA_anuroditi'],[4271, 13, 9, 'SanakEH'],[4277, 40, 17, 'nigaqAni'],[4279, 20, 9, 'priyasya_upari'],[4280, 3, 2, 'sOganDyam'],[4280, 23, 13, 'nedIyaH'],[4280, 31, 19, 'Alole'],[4281, 20, 10, 'nIDrEH'],[4282, 0, 1, 'vedini'],[4283, 14, 6, 'jiGatsam'],[4284, 0, 1, 'tarujAni'],[4284, 4, 5, 'lolupaH'],[4284, 9, 9, 'gfhARa_iti'],[4284, 10, 11, 'dorByAm'],[4285, 9, 5, 'piSaNgEH'],[4285, 14, 8, 'AkalpEH'],[4285, 19, 12, 'vyarAji'],[4286, 0, 1, 'tasya_uraH'],[4287, 1, 2, 'vipARqurARi'],[4287, 2, 3, 'pratimacCavIni'],[4288, 16, 11, 'piSitam'],[4290, 30, 14, 'tadA_AsIt'],[4291, 3, 4, 'abiBitAm'],[4294, 33, 16, 'reje'],[4296, 11, 7, 'jagfhe'],[4297, 13, 7, 'jam'],[4297, 14, 8, 'nigadantaH'],[4298, 12, 6, 'anapAyinIm'],[4299, 23, 13, 'anAyi'],[4301, 1, 2, 'niketanAnAm'],[4301, 11, 5, 'cikraMsayA_AyataniScalANgam'],[4304, 9, 7, 'niradinIH'],[4305, 10, 7, 'gfhItvA_aTa'],[4306, 0, 1, 'ApARqoH'],[4306, 10, 6, 'nirDOte'],[4306, 21, 12, 'ahnAya'],[4308, 4, 3, 'AkftIni'],[4309, 4, 3, 'vilulitAm'],[4309, 5, 4, 'samBavAm'],[4310, 17, 8, 'nizevyamARA'],[4310, 29, 14, 'vyaDita'],[4316, 20, 10, 'vismerAn'],[4317, 6, 4, 'pradAH'],[4317, 9, 7, 'vellanAya'],[4318, 0, 1, 'muKI'],[4318, 7, 5, 'tatA_mayI'],[4320, 9, 5, 'utsUtrEH'],[4321, 13, 10, 'ca_AmodakarmavyatihAram'],[4323, 0, 1, 'bAhlije'],[4323, 5, 4, 'vyAjiGrati'],[4323, 9, 6, 'tanIyaH'],[4323, 12, 8, 'tasya_utsukAyAH'],[4324, 10, 6, 'sarvataH'],[4325, 1, 2, 'vfTA_AhitEH'],[4327, 4, 3, 'vitardiniryUhaviwaNkanIqaH'],[4327, 17, 9, 'SrfRvan'],[4328, 12, 4, 'kleSaprahARam'],[4329, 17, 10, 'nikareRa_ullasatA'],[4329, 20, 13, 'SezeRa_iva'],[4330, 0, 1, 'dvayasIH'],[4330, 9, 6, 'pfzatAm'],[4336, 8, 4, 'jAlAH'],[4337, 13, 8, 'vfkzakI'],[4339, 18, 8, 'ruheRa'],[4343, 19, 14, 'reje'],[4344, 13, 7, 'sA_aNganA'],[4345, 22, 4, 'kOsumam'],[4345, 43, 16, 'pupUre'],[4346, 21, 8, 'uttaMsAn'],[4346, 36, 17, 'cakzuzyaH'],[4349, 2, 2, 'haritakam'],[4351, 26, 16, 'AhatA_amUrcCat'],[4352, 8, 7, 'nirAsi'],[4357, 9, 6, 'ruhezu'],[4360, 1, 2, 'mandarakUwakowivyAGawwanottejanayA_baMhIyasA_maRInAm'],[4360, 2, 5, 'dIptivitAnakena_ullasantI'],[4364, 28, 9, 'nIvi'],[4369, 24, 9, 'rUpAH'],[4370, 1, 2, 'naBasvataH'],[4370, 11, 7, 'anitayA_vanitayA_na'],[4372, 18, 10, 'amajji'],[4374, 10, 6, 'DArzwyam'],[4375, 25, 9, 'rOhiReyaH'],[4380, 17, 9, 'svidaH'],[4381, 33, 17, 'cArUH'],[4382, 3, 3, 'kusumAH'],[4384, 5, 4, 'nizevyamARena'],[4384, 33, 16, 'AhvAsta'],[4386, 6, 3, 'tareRa_OkzakeRa'],[4386, 11, 7, 'sAsnam'],[4387, 9, 6, 'huNkftiH'],[4387, 12, 9, 'viyuvatIH'],[4388, 9, 8, 'BareRa_iva'],[4388, 13, 13, 'atami'],[4389, 4, 4, 'upeyuzA_iva'],[4389, 16, 11, 'ASlezi'],[4391, 21, 14, 'kopitaH'],[4392, 9, 5, 'SrfNgEH'],[4392, 22, 11, 'roDAMsi'],[4392, 23, 12, 'caskarire'],[4393, 15, 9, 'atami'],[4394, 13, 9, 'cyotadBiH'],[4394, 14, 10, 'nizRAtEH'],[4397, 0, 1, 'atulapratApaH'],[4397, 7, 7, 'pratolIm'],[4397, 9, 9, 'vajrapraBodBAsisurAyuDaSrIH'],[4398, 19, 10, 'BaNktvA_vizARam'],[4399, 7, 5, 'aBizizeRayizum'],[4399, 9, 7, 'AKyata_iva'],[4400, 0, 1, 'kriyeRa'],[4400, 3, 3, 'tanIyasA_bAhvoH'],[4400, 12, 11, 'atami'],[4401, 6, 4, 'vismayAm'],[4401, 11, 8, 'amBastaH'],[4401, 15, 11, 'iva_udvIkzya'],[4401, 18, 14, 'asmArzIt'],[4404, 11, 6, 'nirIyuH'],[4404, 14, 8, 'jawAjUwAt'],[4404, 19, 11, 'nirIyuH'],[4404, 25, 16, 'nirIyuH'],[4404, 33, 19, 'nirIyuH'],[4405, 10, 9, 'DavalimnaH'],[4405, 13, 11, 'aBiKyAm'],[4406, 1, 2, 'avfTA'],[4406, 20, 11, 'aBraMlihAni'],[4406, 24, 14, 'lolozWam'],[4407, 23, 14, 'taruzaH'],[4408, 16, 9, 'nizaRREH'],[4408, 20, 12, 'atami'],[4410, 6, 3, 'vilolEH'],[4412, 18, 9, 'nirjagAra'],[4412, 22, 12, 'saMvalitam'],[4412, 32, 17, 'nirjagAra'],[4413, 3, 2, 'tAlinaH'],[4413, 9, 5, 'rajasA_aDikam'],[4414, 7, 5, 'niHsahatvam'],[4414, 14, 9, 'atami'],[4415, 27, 14, 'atyAkzuH'],[4415, 34, 18, 'arodi'],[4416, 26, 16, 'asambADam'],[4416, 27, 17, 'ayAmbaBUve'],[4417, 8, 7, 'muzi'],[4417, 17, 14, 'vasanAH'],[4417, 23, 18, 'vrIqam'],[4419, 7, 4, 'tayA_aBAji'],[4420, 21, 12, 'atami'],[4421, 1, 2, 'SayinIm'],[4421, 2, 3, 'saMsaktim'],[4422, 0, 1, 'rayAt'],[4425, 7, 4, 'AliH'],[4427, 3, 4, 'aBizaNgAt'],[4427, 6, 7, 'atami'],[4431, 8, 8, 'Darasya_udDartA_asi'],[4431, 28, 23, 'prApipayizuH'],[4432, 17, 13, 'manIzayA_imAH'],[4433, 26, 10, 'nidaDye'],[4435, 10, 6, 'ABam'],[4436, 5, 3, 'SarkaratAm'],[4437, 14, 6, 'snapitEH'],[4438, 8, 4, 'pranartitAnekalatABujAgrAn'],[4439, 10, 6, 'praKaram'],[4441, 0, 1, 'haMsyaH'],[4444, 7, 4, 'rASIH'],[4445, 2, 2, 'mayI'],[4446, 6, 4, 'vipulakam'],[4446, 15, 9, 'malitan'],[4447, 19, 8, 'ca_iti'],[4447, 20, 10, 'IyAn'],[4447, 22, 12, 'AkalpaH'],[4448, 15, 5, 'samprayujaH'],[4449, 19, 10, 'itA_ramaRIramaRena'],[4450, 3, 3, 'latayAt'],[4451, 20, 11, 'tadA_eva'],[4451, 21, 13, 'rocizA_api'],[4453, 19, 13, 'SilInDre'],[4454, 10, 6, 'namayya'],[4455, 1, 2, 'velam'],[4455, 5, 4, 'niDinA_gArDyAt'],[4455, 23, 13, 'mAntIH'],[4455, 27, 15, 'indaH'],[4455, 35, 19, 'AkalayAYcakAra'],[4456, 5, 5, 'kuwajAni'],[4456, 14, 11, 'ninadasya'],[4457, 11, 7, 'kiSorakO'],[4459, 0, 1, 'kamanI'],[4459, 26, 11, 'samud'],[4460, 1, 2, 'ApUraH'],[4460, 7, 5, 'gattvA'],[4460, 20, 12, 'ullaNGya'],[4461, 10, 9, 'sampraRItAH'],[4465, 0, 1, 'diSyAni'],[4465, 21, 13, 'sAMyAtrikAn'],[4469, 8, 3, 'premRA_manassu'],[4471, 6, 6, 'lIlayA_AvaliH'],[4471, 15, 11, 'uccakEH'],[4472, 0, 1, 'kaRakaH'],[4472, 2, 3, 'udanvataH'],[4473, 40, 23, 'girA_acodi'],[4475, 11, 6, 'taTA_ABAH'],[4475, 13, 9, 'SEvalinIH'],[4476, 3, 3, 'cakrAH'],[4478, 13, 12, 'asunirasaH'],[4480, 10, 6, 'Asedire'],[4481, 7, 5, 'kramukAH'],[4485, 17, 9, 'kalatayA_rajitAH'],[4487, 10, 9, 'palyaNkEH'],[4491, 0, 1, 'naBasvataH'],[4491, 2, 3, 'AGawwanayA_raRadBiH'],[4491, 6, 7, 'mUrcCanAm'],[4492, 21, 12, 'taqitvAn'],[4492, 22, 13, 'iva_uccakEH'],[4494, 12, 6, 'saparyayA'],[4495, 27, 15, 'aBinyavIviSat'],[4496, 7, 4, 'uccakEH'],[4498, 26, 12, 'mUrDnA_agrahIt'],[4499, 26, 12, 'SrfNgasya'],[4500, 24, 10, 'sarvataH'],[4502, 4, 4, 'saMvalitAH'],[4502, 19, 12, 'virejire'],[4503, 18, 9, 'tadA_ekavarRO'],[4505, 0, 1, 'DAmanam'],[4506, 26, 11, 'sitimnA_lamBayan'],[4509, 13, 8, 'sadA_upayoge'],[4510, 5, 3, 'nibarhitAMhasA_amunA'],[4510, 7, 6, 'vilokanena_eva'],[4512, 8, 5, 'vada_iti'],[4514, 29, 9, 'saMSrayA'],[4516, 22, 10, 'uccakEH'],[4519, 5, 3, 'ujjAsayitum'],[4519, 12, 7, 'na_upAjihITAH'],[4523, 17, 13, 'tvadABAzaRalolupam'],[4526, 8, 6, 'samatsareRa_upeyuzA'],[4526, 17, 11, 'manassu'],[4527, 20, 13, 'ayaSaskaram'],[4528, 0, 1, 'nAkinAm'],[4528, 14, 10, 'nAkinAm'],[4528, 25, 15, 'nAkinAm'],[4528, 32, 20, 'nAkinAm'],[4529, 3, 2, 'saYcArizRuH'],[4530, 4, 3, 'sEMhIm'],[4530, 30, 12, 'caskare'],[4531, 37, 13, 'nikAmaBIzaRam'],[4532, 13, 8, 'cikartizuH'],[4533, 34, 11, 'rocizam'],[4534, 16, 8, 'nizkrayam'],[4536, 10, 7, 'aBramoH'],[4536, 17, 11, 'praSaSaMsa_indraH'],[4536, 29, 17, 'praSaSaMsa_indraH'],[4537, 14, 7, 'soQum'],[4538, 0, 1, 'GawwanAt'],[4538, 4, 3, 'aprasahizRu'],[4539, 2, 3, 'dantI'],[4540, 26, 9, 'prahartuH'],[4542, 0, 1, 'ahaskaraH'],[4543, 10, 7, 'pawIyasA_vitanvatA_indunA_vilAsinaH'],[4544, 0, 1, 'piSaNgamOYjIyujam'],[4544, 13, 7, 'SitivAsasaH'],[4546, 0, 1, 'niSAntanArIpariDAnaDUnanasPuwAgasA_api'],[4546, 9, 7, 'prakampanena'],[4549, 16, 4, 'apunarnivartiBiH'],[4549, 22, 8, 'alamBi'],[4550, 26, 13, 'sacandanAmBakaRakomalEH'],[4551, 1, 2, 'prasUnaklfptim'],[4552, 44, 19, 'sadA_aBimAnEkaDanAH'],[4554, 2, 3, 'CalanAparaH'],[4554, 21, 16, 'asaH'],[4555, 25, 10, 'uccakEH'],[4556, 29, 17, 'uccakEH'],[4558, 6, 4, 'aDunA_api'],[4558, 13, 9, 'suniScalA'],[4558, 23, 16, 'pumAMsAm'],[4560, 4, 2, 'purandarasya_udUQadraQima'],[4561, 23, 12, 'aTa_om'],[4561, 35, 19, 'SArNgiRaH'],[4561, 48, 27, 'BrakuwicCalena_Aspadam'],[4562, 8, 4, 'kuTena'],[4564, 1, 2, 'yiyakzamARena'],[4568, 26, 8, 'ca_uBaye'],[4570, 21, 8, 'aDvaraDurAm'],[4574, 1, 2, 'vimanIkftAH'],[4575, 0, 1, 'nAkinAm'],[4578, 32, 18, 'sozma'],[4581, 11, 2, 'praRiDiyaH'],[4582, 0, 1, 'anutsUtrapadanyAsA'],[4583, 15, 6, 'sAmavAyikAH'],[4583, 16, 7, 'uddUzya'],[4584, 7, 5, 'rAjanyakAni'],[4584, 8, 6, 'ajAtaSAtravIm'],[4588, 5, 5, 'durnayasya'],[4588, 6, 6, 'argalAm'],[4588, 14, 10, 'OdDavIm'],[4588, 18, 14, 'uccakEH'],[4592, 0, 1, 'madirAsvAdamadapAwalitadyutIrevatIvadanocCizwaparipUtapuwe'],[4593, 0, 1, 'sAkziRIm'],[4593, 7, 5, 'mlApayan'],[4594, 4, 3, 'svedavipruzaH'],[4595, 8, 3, 'pallavIm'],[4596, 21, 10, 'sArdDam'],[4598, 13, 4, 'SvEtyam'],[4600, 13, 9, 'Dak'],[4602, 19, 11, 'pravAcaH'],[4603, 26, 13, 'ca_iti'],[4604, 0, 1, 'anirloqitakAryasya'],[4604, 13, 6, 'DAnuzkasya'],[4605, 10, 4, 'sOgatAnAm'],[4605, 11, 5, 'AtmA_iva'],[4607, 10, 4, 'jAjvalyamAnA_asO'],[4607, 16, 8, 'vyadyotizwa'],[4608, 15, 9, 'UrIkftya'],[4608, 22, 12, 'pratAyate'],[4612, 3, 2, 'aKilIkftya'],[4615, 0, 1, 'upakartrA_ariRA_api'],[4617, 19, 11, 'tawIm'],[4617, 22, 14, 'arOtsIt'],[4621, 31, 10, 'udarcizam'],[4622, 1, 2, 'kzamI'],[4622, 13, 9, 'kzAmyatu'],[4624, 21, 9, 'ajananiH'],[4625, 9, 5, 'utTAya_AhantuH'],[4632, 6, 6, 'akftvA_anAlambA'],[4634, 28, 13, 'pariziYcati'],[4636, 1, 2, 'AyaTAtaTyAt'],[4637, 6, 2, 'svaSaktyupacaye'],[4638, 1, 2, 'lilaNGayizataH'],[4641, 0, 1, 'ripuRA_dvEmAture'],[4641, 10, 9, 'jaH'],[4641, 11, 10, 'sudamaH'],[4644, 0, 1, 'ucCfNKalam'],[4650, 1, 2, 'saMramBiRaH'],[4650, 8, 6, 'pratiDvAnEH'],[4652, 0, 1, 'aTa_udDavaH'],[4653, 15, 6, 'snapitA_iva'],[4655, 0, 1, 'taTA_api'],[4656, 9, 8, 'graTitasya'],[4656, 12, 10, 'geyasya_iva'],[4658, 5, 4, 'durudAharaH'],[4660, 11, 5, 'udgrAhyate'],[4660, 22, 12, 'guRanikA_eva'],[4663, 13, 4, 'sTeyasIm'],[4663, 29, 10, 'nizaRRAH'],[4667, 10, 4, 'nirAkulAH'],[4670, 4, 4, 'upaSayasTaH'],[4676, 9, 5, 'prakalpate'],[4678, 1, 2, 'dEzwikatAm'],[4681, 16, 9, 'sunigrahAH'],[4682, 14, 5, 'praTIyasIm'],[4683, 2, 2, 'jitvarEH'],[4683, 18, 8, 'vinA_api'],[4684, 3, 3, 'vaMSasya_itare'],[4687, 3, 3, 'zAqguRyam'],[4695, 10, 7, 'kArmukeRa_iva'],[4697, 6, 5, 'upajApaH'],[4697, 8, 7, 'AkopavataH'],[4697, 15, 14, 'dIpayitA']]
	underscore_problems=[]
	non_rec_words=[]
	underscore_sent=[]
	non_rec_sent=[]
	for cur_problem in problem_list:
		if "_" in cur_problem[3]:
			underscore_problems.append(cur_problem)
			underscore_sent.append(cur_problem[0])
			pass
		else :
			non_rec_words.append(cur_problem)
			non_rec_sent.append(cur_problem[0])
			pass
		pass
	underscore_sent=list(set(underscore_sent))
	underscore_sent.sort()
	non_rec_sent=list(set(non_rec_sent))
	non_rec_sent.sort()
	print len(underscore_problems)
	print len(non_rec_words)
	print "-----------------------------"
	print (non_rec_sent)
	pass

def handle_underscores():
	cur_file=open('all_sents.txt','r')
	line_data=cur_file.readlines()
	underscore_problems=[19, 22, 40, 66, 84, 92, 120, 138, 144, 145, 154, 179, 181, 201, 215, 242, 299, 309, 341, 351, 354, 423, 430, 468, 475, 589, 614, 705, 853, 986, 1008, 1019, 1061, 1094, 1098, 1123, 1248, 1332, 1378, 1435, 1483, 1490, 1491, 1515, 1544, 1546, 1548, 1562, 1591, 1606, 1655, 1691, 1726, 1740, 1742, 1781, 1790, 1803, 1804, 1918, 1920, 1931, 1945, 1982, 1986, 1988, 2009, 2011, 2013, 2019, 2037, 2056, 2078, 2111, 2114, 2115, 2161, 2232, 2237, 2260, 2276, 2299, 2324, 2330, 2345, 2360, 2377, 2379, 2392, 2421, 2432, 2452, 2483, 2489, 2495, 2508, 2539, 2555, 2583, 2593, 2598, 2605, 2623, 2636, 2639, 2644, 2645, 2669, 2685, 2717, 2748, 2752, 2821, 2863, 2872, 2877, 2900, 2904, 2906, 2929, 2940, 3013, 3034, 3045, 3063, 3069, 3071, 3078, 3080, 3086, 3102, 3112, 3122, 3125, 3139, 3158, 3218, 3223, 3250, 3285, 3312, 3325, 3332, 3387, 3393, 3433, 3451, 3467, 3493, 3495, 3496, 3497, 3503, 3508, 3517, 3542, 3551, 3563, 3567, 3577, 3578, 3580, 3584, 3602, 3616, 3618, 3633, 3656, 3657, 3694, 3740, 3745, 3747, 3750, 3753, 3760, 3763, 3771, 3803, 3814, 3815, 3817, 3838, 3852, 3884, 3909, 3919, 4001, 4002, 4010, 4023, 4030, 4031, 4046, 4053, 4056, 4060, 4066, 4069, 4071, 4072, 4074, 4092, 4100, 4101, 4102, 4113, 4135, 4167, 4171, 4177, 4182, 4185, 4186, 4197, 4199, 4201, 4209, 4215, 4222, 4229, 4230, 4235, 4239, 4252, 4263, 4264, 4270, 4279, 4284, 4286, 4290, 4301, 4305, 4318, 4321, 4323, 4325, 4329, 4344, 4351, 4360, 4370, 4386, 4388, 4389, 4398, 4399, 4400, 4401, 4413, 4419, 4431, 4432, 4447, 4449, 4451, 4455, 4469, 4471, 4473, 4475, 4485, 4491, 4492, 4498, 4503, 4506, 4509, 4510, 4512, 4519, 4526, 4536, 4543, 4546, 4552, 4558, 4560, 4561, 4568, 4603, 4605, 4607, 4615, 4625, 4632, 4641, 4652, 4653, 4655, 4656, 4660, 4683, 4684, 4695]
	underscore_problems=[2299,3495,3838,351,354,4023,4100,4546,4656,1546,1655,1742,4031,4398,4401,4451,4536,4656]
	underscore_problems=[19, 20, 37, 110, 111, 279, 592, 626, 786, 967, 1031, 1347, 1418, 1489, 1529, 1667, 1670, 1842, 1848, 1855, 2065, 2067, 2129, 2177, 2274, 2555, 2725, 3008, 3288, 3556, 3664, 3688, 3689, 3706, 3728, 3730, 3808, 3948, 4053, 4127, 4144, 4154, 4218, 4239, 4252, 4256, 4258, 4295, 4329, 4448, 4449, 4539, 4592, 4670, 4691]
	for cur_line in line_data:
		sent_id, inputline=cur_line.split(":")
		sent_id=int(sent_id)
		if sent_id in underscore_problems:
			print cur_line.strip()
			pass
		pass
	exit()
	cur_file=open('underscore_sents.txt','r')
	line_data=cur_file.readlines()
	known_probs=["tadA_AgacCat","dfzwvA_ekA_nArI","cetasA_anvaBavam","ca_ASrame","rAmasya_ASramAt","sadA_eva","daSaraTasya_AjYayA_rAmaH","atra_Anayam","atra_eva","sadA_eva","dfzwvA_acintayat","sadA_eva","mArayitvA_aBakzayat","svarRasya_ABaraRam","kftvA_ABaraRam","taTA_akarot","kftvA_uccEH","nfpasya_AjYayA_dAsaH","vfTA_AyAsam","daSaraTasya_AjYayA_rAmaH","taTA_anvakurvan","A_Bavati","A_Bavati","A_Bavati","paNkilA_Bavati","atra_Aryasya","aDunA_anyA_gatiH","atra_ezaH","ujjahitvA_AryaputraH","rAmeRa_AtmA","BrAtA_asti","jAmAtA_asti","sadA_eva","vinA_ariH","arGyeRa_fzim","kareRa_Ahvayati","sA_asti","ca_Akfzwam","AtmA_anumodate","taTA_eva","ca_utTAya","prakAreRa_AyAmi","kadA_utpannA_na","praSnasya_uttaram","tadA_aham","tadA_aham","ca_AvayoH","vikrayikasya_uttareRa","tasya_eva", "AnandAnuBUtiH","tasya_eva","kftvA_ekA","ca_AsIt","leKasya_idam","atra_AgamizyaH","atra_AnItavAn","ca_eva","matvA_apamAnayataH","taTA_upavizwam","uktvA_anyaH","ca_ASizwam","uktvA_Akzipat","tadA_aham","tasya_uttaram","tasya_eva","tilakasya_uttaram","yaTA_Agatya","kadA_api","dasyudalasya_Agamanam","dfzwvA_ekam","tava_eva","tava_eva","tasya_etayA","taTA_eva","tasya_eva","mArayitvA_asya","tava_imam","sarvaTA_asahAyaH","svasya_AvAse","dfzwvA_ekaH","ca_eva","taTA_eva_Asan","taTA_eva_AsIt","ca_upasTAtum","tasya_Akrandanam","vastrapawwikayA_AvezwitaH","taTA_AgataH","taTA_eva","taTA_evam","anusAreRa_ekaH","taTA_eva","sA_icCati","ca_icCati","kArayitvA_avaSyam","taTA_eva","tasya_itastataH","ca_ekasmAt","budDvA_iti","tadA_eva","tasya_eva","madIyasya_imam","aDunA_anyaH","sA_alakzitasTAne","jYAtvA_etat","mahASaktiSAlIrAjA_asit","cetanA_nEva_AyAtA","dattvA_avaSizwam","ca_AtmajAya","dattvA_etAH","tadA_eva","tasya_imam","Agatya_upavizwaH","kuruzva_iti","vimAtA_api","vyavahAreRa_indumatI","BrAtA_ekaH","SradDayA_arcitavAn","SrAvakasya_imam","atra_eva","nEva_Apnoti","vinA_eva","DftvA_eva","kaTayitvA_uccEH","praSnasya_uttaram","praSnasya_uttaram","tasya_eva","sarvaTA_ucCinnam","atra_eva","dasyudalasya_AgamanAt","hA_hataH","yaTA_aham","tasya_AvAsAt","tasya_uttamatAm","taTA_eva","atra_Agatasya","atra_eva_ekAkinam","atra_inDanasTitO","tadA_aham","aDunA_aham","taTA_astu","tasya_AdeSam","ekasya_upari","kftvA_ArUQAH","yaTA_eva","taTA_eva","ca_Agamanaprayojanam","tasya_idam","atra_eva","gfhasTasya_AvAsam","Bojasya_eva","sarvaTA_idam","tadA_aham","sA_api","kfzRapakzasya_AsIt","atra_eva","aDunA_api","mA_aDunA_iti","vfTA_eva","taTA_eva","atra_eva","atra_eva","tasya_evam","atra_eva","taTA_eva","pitA_atra_eva","kftvA_eva_AtmAnam","tasya_imAm","tadA_aham","SrutvA_AnandASruBiH","vinA_AhAram","ca_ime","tasya_icCAm","tasya_AdeSam","tadA_aham","taTA_asmaByam","taTA_eva","sA_api","leKayitvA_upayuktasTAne","sadA_eva","sA_api","kaTAvAcakasya_idam","tadA_eva","yaTA_eva","taTA_eva","yaTA_eva","taTA_eva","sadA_eva_ekA","ca_AsIt","sadA_eva","tasya_AtmajaH","sA_avaSyam","sA_eva","tasya_idam","taTA_AsIt","ca_AhUya","kaTayitvA_AtmanA","ca_evaMviDam","sadA_eva","tasya_ASramapadam","ca_enam","gatvA_AdityasanniBEH","apAsya_Agastyam","BitvA_utTitam","yasya_ucCrAyasOndaryaguRAH","rasA_mat","rasA_mat","sA_aSeze", "aSezajanA","parigfhya_Akulena_udbAhunA","na_Askandan","tasya_ekabAhuH","kftvA_antaH","priyatayA_aGaSaNkiBiH","satA_nAmnA_api","tasya_eva","dfzwvA_eva","banDutayA_uditEH","DunvAnA_UrUH","vAsasA_apareRa","nataBruvA_AnABeH","DAmA_medinIzu","atra_OGAH","vinA_api","ca_itastataH","vaDvA_dayam","vartma_upeyuzaH","atra_uzitAH","yA_anirvidA_viDAtrA","viGawwanayA_divaH","uttarIyabanDA_mUlA_asTita","paripARqimA_Adade","dayitatamena_udakena","SrutvA_api","aDIratayA_vyavaDim","nizaNgiRA_rajasA","ca_upaBogam","malinimA_yozitAm","AtmanA_eva","mAlA_abanDi","gfhItvA_AsannAm","mA_nipAti","yantrA_AkalanAya","tarasA_AtmanA_eva","atiSlakzRatayA_AleKyam","iha_indoH","kila_iti","vatsalatayA_anuroditi","priyasya_upari","gfhARa_iti","tasya_uraH","tadA_AsIt","cikraMsayA_AyataniScalANgam","gfhItvA_aTa","tatA_mayI","ca_AmodakarmavyatihAram","tasya_utsukAyAH","vfTA_AhitEH","nikareRa_ullasatA","SezeRa_iva","sA_aNganA","AhatA_amUrcCat","mandarakUwakowivyAGawwanottejanayA_baMhIyasA_maRInAm","dIptivitAnakena_ullasantI","anitayA_vanitayA_na","tareRa_OkzakeRa","BareRa_iva","upeyuzA_iva","BaNktvA_vizARam","AKyata_iva","tanIyasA_bAhvoH","iva_udvIkzya","rajasA_aDikam","tayA_aBAji","Darasya_udDartA_asi","manIzayA_imAH","ca_iti","itA_ramaRIramaRena","tadA_eva","rocizA_api","niDinA_gArDyAt","premRA_manassu","lIlayA_AvaliH","girA_acodi","taTA_ABAH","kalatayA_rajitAH","AGawwanayA_raRadBiH","iva_uccakEH","mUrDnA_agrahIt","tadA_ekavarRO","sitimnA_lamBayan","sadA_upayoge","nibarhitAMhasA_amunA","vilokanena_eva","vada_iti","na_upAjihITAH","samatsareRa_upeyuzA","praSaSaMsa_indraH","praSaSaMsa_indraH","pawIyasA_vitanvatA_indunA_vilAsinaH","niSAntanArIpariDAnaDUnanasPuwAgasA_api","sadA_aBimAnEkaDanAH","aDunA_api","purandarasya_udUQadraQima","aTa_om","BrakuwicCalena_Aspadam","ca_uBaye","ca_iti","AtmA_iva","jAjvalyamAnA_asO","upakartrA_ariRA_api","utTAya_AhantuH","akftvA_anAlambA","ripuRA_dvEmAture","aTa_udDavaH","snapitA_iva","taTA_api","geyasya_iva","guRanikA_eva","vinA_api","vaMSasya_itare","kArmukeRa_iva"]
	count=0
	for cur_line in line_data:
		sent_id, inputline=cur_line.split(":")
		sent_id=int(sent_id)
		inputline=inputline.strip()
		for cur_prob in known_probs:
			cur_prob_str=cur_prob.replace("_"," ")
			if cur_prob_str in inputline:
				if cur_prob.count('_')==1:
					replace_str=cur_prob.split("_")[1]+" "+cur_prob.split("_")[0]
					inputline=inputline.replace(cur_prob_str,replace_str)
					pass
				pass
			pass
		print str(sent_id)+":"+inputline
		pass
	pass

def verify_underscore():
	# underscore_problems=[19, 22, 40, 66, 84, 92, 120, 138, 144, 145, 154, 179, 181, 201, 215, 242, 299, 309, 341, 351, 354, 423, 430, 468, 475, 589, 614, 705, 853, 986, 1008, 1019, 1061, 1094, 1098, 1123, 1248, 1332, 1378, 1435, 1483, 1490, 1491, 1515, 1544, 1546, 1548, 1562, 1591, 1606, 1655, 1691, 1726, 1740, 1742, 1781, 1790, 1803, 1804, 1918, 1920, 1931, 1945, 1982, 1986, 1988, 2009, 2011, 2013, 2019, 2037, 2056, 2078, 2111, 2114, 2115, 2161, 2232, 2237, 2260, 2276, 2299, 2324, 2330, 2345, 2360, 2377, 2379, 2392, 2421, 2432, 2452, 2483, 2489, 2495, 2508, 2539, 2555, 2583, 2593, 2598, 2605, 2623, 2636, 2639, 2644, 2645, 2669, 2685, 2717, 2748, 2752, 2821, 2863, 2872, 2877, 2900, 2904, 2906, 2929, 2940, 3013, 3034, 3045, 3063, 3069, 3071, 3078, 3080, 3086, 3102, 3112, 3122, 3125, 3139, 3158, 3218, 3223, 3250, 3285, 3312, 3325, 3332, 3387, 3393, 3433, 3451, 3467, 3493, 3495, 3496, 3497, 3503, 3508, 3517, 3542, 3551, 3563, 3567, 3577, 3578, 3580, 3584, 3602, 3616, 3618, 3633, 3656, 3657, 3694, 3740, 3745, 3747, 3750, 3753, 3760, 3763, 3771, 3803, 3814, 3815, 3817, 3838, 3852, 3884, 3909, 3919, 4001, 4002, 4010, 4023, 4030, 4031, 4046, 4053, 4056, 4060, 4066, 4069, 4071, 4072, 4074, 4092, 4100, 4101, 4102, 4113, 4135, 4167, 4171, 4177, 4182, 4185, 4186, 4197, 4199, 4201, 4209, 4215, 4222, 4229, 4230, 4235, 4239, 4252, 4263, 4264, 4270, 4279, 4284, 4286, 4290, 4301, 4305, 4318, 4321, 4323, 4325, 4329, 4344, 4351, 4360, 4370, 4386, 4388, 4389, 4398, 4399, 4400, 4401, 4413, 4419, 4431, 4432, 4447, 4449, 4451, 4455, 4469, 4471, 4473, 4475, 4485, 4491, 4492, 4498, 4503, 4506, 4509, 4510, 4512, 4519, 4526, 4536, 4543, 4546, 4552, 4558, 4560, 4561, 4568, 4603, 4605, 4607, 4615, 4625, 4632, 4641, 4652, 4653, 4655, 4656, 4660, 4683, 4684, 4695]
	main_gold_dict=pickle.load(open( "main_gold_dict.p" , 'rb'))
	file_list=main_gold_dict.keys()
	file_list.sort()
	for cur_file_index in file_list:
		print "sentence :"+str(cur_file_index)
		df = pd.read_csv("dataframes/sentence_dataframes/"+str(cur_file_index)+".csv",dtype={'id': np.int32, 'level': np.int32, 'color_class': 'str', 'position': np.int32, 'chunk_no': np.int32, 'word': 'object','lemma': 'object', 'pre_verb': 'object', 'morph': 'str', 'colspan': np.int32, 'wordlenth': np.int32, 'aux_inf': 'object','word_slp1': 'str', 'word_wx': 'str', 'sandhi_indexs': 'object', 'sandhi_words': 'object'})
		new_dataframe=pd.DataFrame(columns = ['id','level','color_class','position','chunk_no','word_rom','lemma','pre_verb','morph','colspan','wordlenth','aux_inf','word_slp1','sandhi_indexs','sandhi_words'])
		for cur_index, row in df.iterrows():
			# print "row_cur_index :"+str(cur_index)
			row_id=row['id']
			row_level=row['level']
			row_color_class=row['color_class']
			row_position=row['position']
			row_chunk_no=row['chunk_no']
			row_word_rom=row['word']
			row_lemma=utf_to_ascii(row['lemma'])
			row_pre_verb=row['pre_verb']
			if not( local_is_nan(row_pre_verb)):
				row_pre_verb=utf_to_ascii(row_pre_verb)
				pass
			row_morph=row['morph']
			row_colspan=row['colspan']
			row_wordlenth=row['wordlenth']
			row_aux_inf=row['aux_inf']
			row_word_slp1=row['word_slp1']
			row_sandhi_indexs=row['sandhi_indexs']
			row_sandhi_words=row['sandhi_words']
			# 
			if ("_" in row_word_slp1):
				print [cur_file_index,row['id'], row['chunk_no'],row['word_slp1']]
				pass
			pass
		pass
	pass

def check_re_arrange_underscores():
	main_gold_dict=pickle.load(open( "main_gold_dict.p" , 'rb'))
	file_list=main_gold_dict.keys()
	file_list.sort()
	# file_list=[245, 273, 335]
	# [4186, 1, 2, 'mUlA_uttarIyabanDA']
	# underscore_problems=[19, 22, 40, 66, 84, 92, 120, 138, 144, 145, 154, 179, 181, 201, 215, 242, 299, 309, 341, 351, 354, 423, 430, 468, 475, 589, 614, 705, 853, 986, 1008, 1019, 1061, 1094, 1098, 1123, 1248, 1332, 1378, 1435, 1483, 1490, 1491, 1515, 1544, 1546, 1548, 1562, 1591, 1606, 1655, 1691, 1726, 1740, 1742, 1781, 1790, 1803, 1804, 1918, 1920, 1931, 1945, 1982, 1986, 1988, 2009, 2011, 2013, 2019, 2037, 2056, 2078, 2111, 2114, 2115, 2161, 2232, 2237, 2260, 2276, 2299, 2324, 2330, 2345, 2360, 2377, 2379, 2392, 2421, 2432, 2452, 2483, 2489, 2495, 2508, 2539, 2555, 2583, 2593, 2598, 2605, 2623, 2636, 2639, 2644, 2645, 2669, 2685, 2717, 2748, 2752, 2821, 2863, 2872, 2877, 2900, 2904, 2906, 2929, 2940, 3013, 3034, 3045, 3063, 3069, 3071, 3078, 3080, 3086, 3102, 3112, 3122, 3125, 3139, 3158, 3218, 3223, 3250, 3285, 3312, 3325, 3332, 3387, 3393, 3433, 3451, 3467, 3493, 3495, 3496, 3497, 3503, 3508, 3517, 3542, 3551, 3563, 3567, 3577, 3578, 3580, 3584, 3602, 3616, 3618, 3633, 3656, 3657, 3694, 3740, 3745, 3747, 3750, 3753, 3760, 3763, 3771, 3803, 3814, 3815, 3817, 3838, 3852, 3884, 3909, 3919, 4001, 4002, 4010, 4023, 4030, 4031, 4046, 4053, 4056, 4060, 4066, 4069, 4071, 4072, 4074, 4092, 4100, 4101, 4102, 4113, 4135, 4167, 4171, 4177, 4182, 4185, 4186, 4197, 4199, 4201, 4209, 4215, 4222, 4229, 4230, 4235, 4239, 4252, 4263, 4264, 4270, 4279, 4284, 4286, 4290, 4301, 4305, 4318, 4321, 4323, 4325, 4329, 4344, 4351, 4360, 4370, 4386, 4388, 4389, 4398, 4399, 4400, 4401, 4413, 4419, 4431, 4432, 4447, 4449, 4451, 4455, 4469, 4471, 4473, 4475, 4485, 4491, 4492, 4498, 4503, 4506, 4509, 4510, 4512, 4519, 4526, 4536, 4543, 4546, 4552, 4558, 4560, 4561, 4568, 4603, 4605, 4607, 4615, 4625, 4632, 4641, 4652, 4653, 4655, 4656, 4660, 4683, 4684, 4695]
	# underscore_problems=[19]
	underscore_problems=[19, 20, 37, 110, 111, 279, 592, 626, 786, 967, 1031, 1347, 1418, 1489, 1529, 1667, 1670, 1842, 1848, 1855, 2065, 2067, 2129, 2177, 2274, 2555, 2725, 3008, 3288, 3556, 3664, 3688, 3689, 3706, 3728, 3730, 3808, 3948, 4053, 4127, 4144, 4154, 4218, 4239, 4252, 4256, 4258, 4295, 4329, 4448, 4449, 4539, 4592, 4670, 4691]
	for cur_file_index in underscore_problems:
		print "sentence :"+str(cur_file_index)
		df = pd.read_csv("dataframes/sentence_dataframes/"+str(cur_file_index)+".csv",dtype={'id': np.int32, 'level': np.int32, 'color_class': 'str', 'position': np.int32, 'chunk_no': np.int32, 'word': 'object','lemma': 'object', 'pre_verb': 'object', 'morph': 'str', 'colspan': np.int32, 'wordlenth': np.int32, 'aux_inf': 'object','word_slp1': 'str', 'word_wx': 'str', 'sandhi_indexs': 'object', 'sandhi_words': 'object'})
		new_dataframe=pd.DataFrame(columns = ['id','level','color_class','position','chunk_no','word_rom','lemma','pre_verb','morph','colspan','wordlenth','aux_inf','word_slp1','sandhi_indexs','sandhi_words'])
		for cur_index, row in df.iterrows():
			print "row_cur_index :"+str(cur_index)
			row_id=row['id']
			row_level=row['level']
			row_color_class=row['color_class']
			row_position=row['position']
			row_chunk_no=row['chunk_no']
			row_word_rom=row['word']
			row_lemma=utf_to_ascii(row['lemma'])
			row_pre_verb=row['pre_verb']
			if not( local_is_nan(row_pre_verb)):
				row_pre_verb=utf_to_ascii(row_pre_verb)
				pass
			row_morph=row['morph']
			row_colspan=row['colspan']
			row_wordlenth=row['wordlenth']
			row_aux_inf=row['aux_inf']
			row_word_slp1=row['word_slp1']
			row_sandhi_indexs=row['sandhi_indexs']
			row_sandhi_words=row['sandhi_words']
			# 
			if ("_" in row_word_slp1):
				print [cur_file_index,row['id'], row['chunk_no'],row['word_slp1']]
				pass
			continue
			# 
			if row_morph=='?':
				print [cur_file_index,row['id'], row['chunk_no'],row['word_slp1']]
				cur_node=main_gold_dict[cur_file_index][0][row['chunk_no']-1]
				print cur_node
				# if morph=="?" update lemma morph 
				row_lemma=cur_node[1]
				row_morph=cur_node[2]
				pass
			new_dataframe.loc[row['id']]=[row_id,row_level,row_color_class,row_position,row_chunk_no,row_word_rom,row_lemma,row_pre_verb,row_morph,row_colspan,row_wordlenth,row_aux_inf,row_word_slp1,row_sandhi_indexs,row_sandhi_words]
			pass
		# new_dataframe.to_csv(str(cur_file_index)+".csv" ,encoding = 'utf-8' , sep=',',index = False,mode = 'w' )
	pass

def get_node_dict_dummy(cur_sent_id):
	cur_file=open('all_sents.txt','r')
	line_data=cur_file.readlines()
	rearrange_dict={}
	for cur_line in line_data:
		sent_id, inputline=cur_line.split(":")
		sent_id=int(sent_id)
		if sent_id!=cur_sent_id:
			continue
			pass
		inputline=inputline.strip()
		input_list=inputline.split(" ")
		ret_dict={}
		for cur_index in range(len(input_list)):
			cur_word=input_list[cur_index]
			ret_dict[cur_index]=[cur_word, cur_word, cur_word, cur_index]
			pass
		return ret_dict
		pass
	pass

def make_rearrange_dicts():
	cur_file=open('swapped_sent.txt','r')
	line_data=cur_file.readlines()
	rearrange_dict={}
	for cur_line in line_data:
		# print cur_line
		sent_id, inputline=cur_line.split(":")
		sent_id=int(sent_id)
		inputline=inputline.strip()
		input_list=inputline.split(" ")
		temp_dict={}
		taken_positions=[]
		node_dict=get_node_dict_dummy(sent_id)
		for cur_index in range(len(input_list)):
			actual_position=None
			cur_word=input_list[cur_index]
			for cur_key in node_dict.keys():
				cur_node=node_dict[cur_key]
				if cur_node[0]==cur_word:
					if ((cur_node[3]+1)not in taken_positions):
						actual_position=cur_node[3]+1
						pass
					pass
				pass
			if actual_position==None:
				for cur_key in node_dict.keys():
					cur_node=node_dict[cur_key]
					if (cur_node[0].lower())==(cur_word.lower()):
						if ((cur_node[3]+1)not in taken_positions):
							actual_position=cur_node[3]+1
							pass
						pass
					pass
				pass
			temp_dict[cur_index+1]=actual_position
			taken_positions.append(actual_position)
			pass
		temp_list=[x+1 for x in node_dict.keys()]
		temp_list.sort()
		taken_positions.sort()
		# if temp_list!=taken_positions:
		# 	print "fatal error !!!"
		# 	print taken_positions
		# 	print sent_id
		# 	# exit()
		# 	pass
		rearrange_dict[sent_id]=temp_dict
		pass
	for cur_sent_id in rearrange_dict.keys():
		temp_dict=rearrange_dict[cur_sent_id]
		node_dict=get_node_dict_dummy(cur_sent_id)
		temp_list=[x+1 for x in node_dict.keys()]
		temp_list.sort()
		taken_positions=[]
		for cur_key in temp_dict.keys():
			taken_positions.append(temp_dict[cur_key])
			pass
		taken_positions.sort()
		if temp_list!=taken_positions:
			print "fatal error !!!"
			print taken_positions
			print temp_list
			print cur_sent_id
			# exit()
			pass
		pass
	print len(rearrange_dict.keys())
	pickle.dump(rearrange_dict,open('rearrange_dict_under.p' , 'w'))
	pass

def check_problem_words():
	# check problem words
	main_gold_dict=pickle.load(open( "main_gold_dict.p" , 'rb'))
	file_list=main_gold_dict.keys()
	file_list.sort()
	# file_list=[245, 273, 335]
	# [4186, 1, 2, 'mUlA_uttarIyabanDA']
	main_dataframe_dict=pickle.load(open( "main_dataframe_dict.p" , 'rb'))
	# underscore_problems=[19, 22, 40, 66, 84, 92, 120, 138, 144, 145, 154, 179, 181, 201, 215, 242, 299, 309, 341, 351, 354, 423, 430, 468, 475, 589, 614, 705, 853, 986, 1008, 1019, 1061, 1094, 1098, 1123, 1248, 1332, 1378, 1435, 1483, 1490, 1491, 1515, 1544, 1546, 1548, 1562, 1591, 1606, 1655, 1691, 1726, 1740, 1742, 1781, 1790, 1803, 1804, 1918, 1920, 1931, 1945, 1982, 1986, 1988, 2009, 2011, 2013, 2019, 2037, 2056, 2078, 2111, 2114, 2115, 2161, 2232, 2237, 2260, 2276, 2299, 2324, 2330, 2345, 2360, 2377, 2379, 2392, 2421, 2432, 2452, 2483, 2489, 2495, 2508, 2539, 2555, 2583, 2593, 2598, 2605, 2623, 2636, 2639, 2644, 2645, 2669, 2685, 2717, 2748, 2752, 2821, 2863, 2872, 2877, 2900, 2904, 2906, 2929, 2940, 3013, 3034, 3045, 3063, 3069, 3071, 3078, 3080, 3086, 3102, 3112, 3122, 3125, 3139, 3158, 3218, 3223, 3250, 3285, 3312, 3325, 3332, 3387, 3393, 3433, 3451, 3467, 3493, 3495, 3496, 3497, 3503, 3508, 3517, 3542, 3551, 3563, 3567, 3577, 3578, 3580, 3584, 3602, 3616, 3618, 3633, 3656, 3657, 3694, 3740, 3745, 3747, 3750, 3753, 3760, 3763, 3771, 3803, 3814, 3815, 3817, 3838, 3852, 3884, 3909, 3919, 4001, 4002, 4010, 4023, 4030, 4031, 4046, 4053, 4056, 4060, 4066, 4069, 4071, 4072, 4074, 4092, 4100, 4101, 4102, 4113, 4135, 4167, 4171, 4177, 4182, 4185, 4186, 4197, 4199, 4201, 4209, 4215, 4222, 4229, 4230, 4235, 4239, 4252, 4263, 4264, 4270, 4279, 4284, 4286, 4290, 4301, 4305, 4318, 4321, 4323, 4325, 4329, 4344, 4351, 4360, 4370, 4386, 4388, 4389, 4398, 4399, 4400, 4401, 4413, 4419, 4431, 4432, 4447, 4449, 4451, 4455, 4469, 4471, 4473, 4475, 4485, 4491, 4492, 4498, 4503, 4506, 4509, 4510, 4512, 4519, 4526, 4536, 4543, 4546, 4552, 4558, 4560, 4561, 4568, 4603, 4605, 4607, 4615, 4625, 4632, 4641, 4652, 4653, 4655, 4656, 4660, 4683, 4684, 4695]
	# rearrange_dict_under=pickle.load(open( "rearrange_dict_under.p" , 'rb'))
	# file_list=[19, 20, 37, 110, 111, 279, 592, 626, 786, 967, 1031, 1347, 1418, 1489, 1529, 1667, 1670, 1842, 1848, 1855, 2065, 2067, 2129, 2177, 2274, 2555, 2725, 3008, 3288, 3556, 3664, 3688, 3689, 3706, 3728, 3730, 3808, 3948, 4053, 4127, 4144, 4154, 4218, 4239, 4252, 4256, 4258, 4295, 4329, 4448, 4449, 4539, 4592, 4670, 4691]
	underscore_split_error=[]
	for cur_file_index in file_list:
		print "sentence :"+str(cur_file_index)
		# df = pd.read_csv("dataframes/sentence_dataframes/"+str(cur_file_index)+".csv",dtype={'id': np.int32, 'level': np.int32, 'color_class': 'str', 'position': np.int32, 'chunk_no': np.int32, 'word': 'object','lemma': 'object', 'pre_verb': 'object', 'morph': 'str', 'colspan': np.int32, 'wordlenth': np.int32, 'aux_inf': 'object','word_slp1': 'str', 'word_wx': 'str', 'sandhi_indexs': 'object', 'sandhi_words': 'object'})
		df=main_dataframe_dict[cur_file_index]
		# new_dataframe=pd.DataFrame(columns = ['id','level','color_class','position','chunk_no','word_rom','lemma','pre_verb','morph','colspan','wordlenth','aux_inf','word_slp1','sandhi_indexs','sandhi_words'])
		chunks_covered=[]
		for cur_index, row in df.iterrows():
			print "row_cur_index :"+str(cur_index)
			row_id=row['id']
			row_level=row['level']
			row_color_class=row['color_class']
			row_position=row['position']
			row_chunk_no=row['chunk_no']
			row_word_rom=row['word_rom']
			row_lemma=utf_to_ascii(row['lemma'])
			row_pre_verb=row['pre_verb']
			if not( local_is_nan(row_pre_verb)):
				row_pre_verb=utf_to_ascii(row_pre_verb)
				pass
			row_morph=row['morph']
			row_colspan=row['colspan']
			row_wordlenth=row['wordlenth']
			row_aux_inf=row['aux_inf']
			row_word_slp1=row['word_slp1']
			row_sandhi_indexs=row['sandhi_indexs']
			row_sandhi_words=row['sandhi_words']
			chunks_covered.append(row_chunk_no-1)
			# 
			if ("_" in row_word_slp1):
				print [cur_file_index,row['id'], row['chunk_no'],row['word_slp1']]
				pass
			# 
			if row_morph=='?':
				print [cur_file_index,row['id'], row['chunk_no'],row['word_slp1']]
				cur_node=main_gold_dict[cur_file_index][0][row_chunk_no-1]
				print cur_node
				# if morph=="?" update lemma morph 
				row_lemma=cur_node[1]
				row_morph=cur_node[2]
				pass
			# new_dataframe.loc[row['id']]=[row_id,row_level,row_color_class,row_position,row_chunk_no,row_word_rom,row_lemma,row_pre_verb,row_morph,row_colspan,row_wordlenth,row_aux_inf,row_word_slp1,row_sandhi_indexs,row_sandhi_words]
			pass
		# new_dataframe.to_csv(str(cur_file_index)+".csv" ,encoding = 'utf-8' , sep=',',index = False,mode = 'w' )
		# main_dataframe_dict[cur_file_index]=new_dataframe
		chunks_covered=list(set(chunks_covered))
		chunks_covered.sort()
		key_list=main_gold_dict[cur_file_index][0].keys()
		key_list.sort()
		if key_list!=chunks_covered:
			underscore_split_error.append(cur_file_index)
			pass
		pass
	# pickle.dump(main_dataframe_dict,open('main_dataframe_dict.p' , 'w'))
	print underscore_split_error
	pass

def check_gold_dataframe_mapping():
	# check mapping 
	# check inclusion
	# conll dataframes
	# gold_substitute will conflict with all the others.
	main_gold_dict=pickle.load(open( "main_gold_dict.p" , 'rb'))
	file_list=main_gold_dict.keys()
	file_list.sort()
	main_dataframe_dict=pickle.load(open( "main_dataframe_dict.p" , 'rb'))
	# file_list=file_list[:10]
	# file_list=file_list[:10]
	conll_mapped_dataframe_dict={}
	for cur_file_index in file_list:
		print "sentence :"+str(cur_file_index)
		df=main_dataframe_dict[cur_file_index]
		new_dataframe=pd.DataFrame(columns = ['s_no', 'word', 'lemma', 'morph', 'true_node', 'dep_tag', 'to_node'])
		node_dict=main_gold_dict[cur_file_index][0]
		edge_list=main_gold_dict[cur_file_index][1]
		temp_dict={}
		for cur_index, row in df.iterrows():
			print "row_cur_index :"+str(cur_index)
			row_id=row['id']
			row_level=row['level']
			row_color_class=row['color_class']
			row_position=row['position']
			row_chunk_no=row['chunk_no']
			row_word_rom=row['word_rom']
			row_lemma=utf_to_ascii(row['lemma'])
			row_pre_verb=row['pre_verb']
			row_morph=row['morph']
			row_colspan=row['colspan']
			row_wordlenth=row['wordlenth']
			row_aux_inf=row['aux_inf']
			row_word_slp1=row['word_slp1']
			row_sandhi_indexs=row['sandhi_indexs']
			row_sandhi_words=row['sandhi_words']
			temp_dict[row_id]= [row_word_slp1 ,row_lemma,row_morph,row_chunk_no-1]
			pass
		key_list=node_dict.keys()
		key_list.sort()
		taken_positions=[]
		for cur_key in key_list:
			cur_node=node_dict[cur_key]
			cur_matched_node=None
			for cur_temp_key in temp_dict.keys():
				cur_shr_node=temp_dict[cur_temp_key]
				# lemma, morph, chunk_no
				# print cur_shr_node
				if ((cur_node[1].strip()==cur_shr_node[1].strip()) and (cur_node[2].strip()==cur_shr_node[2].strip()) and (cur_node[3]==cur_shr_node[3]) and (not(cur_temp_key in taken_positions))):
					cur_matched_node=cur_temp_key
					taken_positions.append(cur_temp_key)
					pass
				pass
			if cur_matched_node==None:
				print ([cur_file_index]+cur_node)
				pass
			else :
				dep_data=None
				for cur_edge in edge_list:
					if cur_edge[0]==cur_key:
						dep_data=[cur_edge[2],cur_edge[1]]
						pass
					pass
				if dep_data==None:
					print "fatal error !!"
					print cur_file_index
					continue
					pass
				# s_no, word, lemma, morph, true_node, dep_tag, to_node
				temp_list= [cur_key]+cur_node[:3]+[cur_matched_node]+dep_data
				new_dataframe.loc[cur_key]=temp_list
				pass
			pass
		conll_mapped_dataframe_dict[cur_file_index]= new_dataframe
		pass
	print len(conll_mapped_dataframe_dict.keys())
	# pickle.dump(conll_mapped_dataframe_dict,open('conll_mapped_dataframe_dict.p' , 'w'))
	pass

def update_gold_dataframe_mapping():
	# check mapping 
	# check inclusion
	# conll dataframes
	# gold_substitute will conflict with all the others.
	main_gold_dict=pickle.load(open( "main_gold_dict.p" , 'rb'))
	file_list=main_gold_dict.keys()
	file_list.sort()
	main_dataframe_dict=pickle.load(open( "main_dataframe_dict.p" , 'rb'))
	# file_list=file_list[:10]
	# file_list=[19]
	temp_dataframe_dict={}
	conll_mapped_dataframe_dict={}
	# underscore_split_error=[19, 20, 37, 110, 111, 279, 592, 626, 786, 967, 1031, 1347, 1418, 1489, 1529, 1667, 1670, 1842, 1848, 1855, 2065, 2067, 2129, 2177, 2274, 2555, 2725, 3008, 3288, 3556, 3664, 3688, 3689, 3706, 3728, 3730, 3808, 3948, 4053, 4127, 4144, 4154, 4218, 4239, 4252, 4256, 4258, 4295, 4329, 4448, 4449, 4539, 4592, 4670, 4691]
	underscore_split_error=[]
	for cur_file_index in file_list:
		print "sentence :"+str(cur_file_index)
		df=main_dataframe_dict[cur_file_index]
		new_dataframe=pd.DataFrame(columns = ['s_no', 'word', 'lemma', 'morph', 'true_node', 'dep_tag', 'to_node'])
		node_dict=main_gold_dict[cur_file_index][0]
		edge_list=main_gold_dict[cur_file_index][1]
		temp_dict={}
		chunk_no_to_id_1={}
		for cur_index, row in df.iterrows():
			print "row_cur_index :"+str(cur_index)
			row_id=row['id']
			row_level=row['level']
			row_color_class=row['color_class']
			row_position=row['position']
			row_chunk_no=row['chunk_no']
			row_word_rom=row['word_rom']
			row_lemma=utf_to_ascii(row['lemma'])
			row_pre_verb=row['pre_verb']
			row_morph=row['morph']
			row_colspan=row['colspan']
			row_wordlenth=row['wordlenth']
			row_aux_inf=row['aux_inf']
			row_word_slp1=row['word_slp1']
			row_sandhi_indexs=row['sandhi_indexs']
			row_sandhi_words=row['sandhi_words']
			temp_dict[row_id]= [row_word_slp1 ,row_lemma,row_morph,row_chunk_no-1]
			if row_level==1:
				chunk_no_to_id_1[row_chunk_no-1]=row_id
				pass
			pass
		key_list=node_dict.keys()
		key_list.sort()
		taken_positions=[]
		for cur_key in key_list:
			cur_node=node_dict[cur_key]
			if cur_key not in chunk_no_to_id_1.keys():
				underscore_split_error.append(cur_file_index)
				continue
				pass
			cur_matched_node=None
			for cur_temp_key in temp_dict.keys():
				cur_shr_node=temp_dict[cur_temp_key]
				# lemma, morph, chunk_no
				# print cur_shr_node
				if ((cur_node[1].strip()==cur_shr_node[1].strip()) and (cur_node[2].strip()==cur_shr_node[2].strip()) and (cur_node[3]==cur_shr_node[3]) and (not(cur_temp_key in taken_positions))):
					cur_matched_node=cur_temp_key
					taken_positions.append(cur_temp_key)
					pass
				pass
			if cur_matched_node==None:
				df_node_index=chunk_no_to_id_1[cur_key]
				df.at[df_node_index, 'lemma'] = cur_node[1].strip()
				df.at[df_node_index, 'morph'] = cur_node[2].strip()
				cur_matched_node=df_node_index
				pass
			dep_data=None
			for cur_edge in edge_list:
				if cur_edge[0]==cur_key:
					dep_data=[cur_edge[2],cur_edge[1]]
					pass
				pass
			if dep_data==None:
				print "fatal error !!"
				print cur_file_index
				continue
				pass
			# s_no, word, lemma, morph, true_node, dep_tag, to_node
			temp_list= [cur_key]+cur_node[:3]+[cur_matched_node]+dep_data
			new_dataframe.loc[cur_key]=temp_list
			pass
		# print new_dataframe
		conll_mapped_dataframe_dict[cur_file_index]= new_dataframe
		temp_dataframe_dict[cur_file_index]=df
		df.to_csv("dataframes/new_sentence_dataframes/"+str(cur_file_index)+".csv" ,encoding = 'utf-8' , sep=',',index = False,mode = 'w' )
		new_dataframe.to_csv("dataframes/conll_gold_dataframes/"+str(cur_file_index)+".csv" ,encoding = 'utf-8' , sep=',',index = False,mode = 'w' )
		pass
	print len(conll_mapped_dataframe_dict.keys())
	pickle.dump(temp_dataframe_dict,open('temp_dataframe_dict.p' , 'w'))
	pickle.dump(conll_mapped_dataframe_dict,open('conll_mapped_dataframe_dict.p' , 'w'))
	print "---------------------------------------"
	underscore_split_error=list(set(underscore_split_error))
	underscore_split_error.sort()
	print underscore_split_error
	pass

if __name__ == '__main__':
	# handle_underscores()
	# make_rearrange_dicts()
	# add to swapped_sent, make rearrange_dict_under, add to underscore_problems, re_check
	# fill_up_problem_words()
	# check_problem_words()
	# check_gold_dataframe_mapping()
	# update_gold_dataframe_mapping()
	pass



